
stm32-nucleo-h723zg-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d58  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  08008190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a10  24000014  080081a4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a24  080081a4  00024a24  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018d8c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000031a6  00000000  00000000  00038e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001238  00000000  00000000  0003bfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e07  00000000  00000000  0003d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000037fa  00000000  00000000  0003dff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001628b  00000000  00000000  000417f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00148dbe  00000000  00000000  00057a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004c00  00000000  00000000  001a083c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000073  00000000  00000000  001a543c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08008010 	.word	0x08008010

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	08008010 	.word	0x08008010

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b970 	b.w	8000618 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	460d      	mov	r5, r1
 8000358:	4604      	mov	r4, r0
 800035a:	460f      	mov	r7, r1
 800035c:	2b00      	cmp	r3, #0
 800035e:	d14a      	bne.n	80003f6 <__udivmoddi4+0xa6>
 8000360:	428a      	cmp	r2, r1
 8000362:	4694      	mov	ip, r2
 8000364:	d965      	bls.n	8000432 <__udivmoddi4+0xe2>
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	b143      	cbz	r3, 800037e <__udivmoddi4+0x2e>
 800036c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000370:	f1c3 0220 	rsb	r2, r3, #32
 8000374:	409f      	lsls	r7, r3
 8000376:	fa20 f202 	lsr.w	r2, r0, r2
 800037a:	4317      	orrs	r7, r2
 800037c:	409c      	lsls	r4, r3
 800037e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000382:	fa1f f58c 	uxth.w	r5, ip
 8000386:	fbb7 f1fe 	udiv	r1, r7, lr
 800038a:	0c22      	lsrs	r2, r4, #16
 800038c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000390:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000394:	fb01 f005 	mul.w	r0, r1, r5
 8000398:	4290      	cmp	r0, r2
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x62>
 800039c:	eb1c 0202 	adds.w	r2, ip, r2
 80003a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003a4:	f080 811c 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003a8:	4290      	cmp	r0, r2
 80003aa:	f240 8119 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003ae:	3902      	subs	r1, #2
 80003b0:	4462      	add	r2, ip
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	b2a4      	uxth	r4, r4
 80003b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80003be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c2:	fb00 f505 	mul.w	r5, r0, r5
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	d90a      	bls.n	80003e0 <__udivmoddi4+0x90>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d2:	f080 8107 	bcs.w	80005e4 <__udivmoddi4+0x294>
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f240 8104 	bls.w	80005e4 <__udivmoddi4+0x294>
 80003dc:	4464      	add	r4, ip
 80003de:	3802      	subs	r0, #2
 80003e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	2100      	movs	r1, #0
 80003e8:	b11e      	cbz	r6, 80003f2 <__udivmoddi4+0xa2>
 80003ea:	40dc      	lsrs	r4, r3
 80003ec:	2300      	movs	r3, #0
 80003ee:	e9c6 4300 	strd	r4, r3, [r6]
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0xbc>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80ed 	beq.w	80005da <__udivmoddi4+0x28a>
 8000400:	2100      	movs	r1, #0
 8000402:	e9c6 0500 	strd	r0, r5, [r6]
 8000406:	4608      	mov	r0, r1
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	fab3 f183 	clz	r1, r3
 8000410:	2900      	cmp	r1, #0
 8000412:	d149      	bne.n	80004a8 <__udivmoddi4+0x158>
 8000414:	42ab      	cmp	r3, r5
 8000416:	d302      	bcc.n	800041e <__udivmoddi4+0xce>
 8000418:	4282      	cmp	r2, r0
 800041a:	f200 80f8 	bhi.w	800060e <__udivmoddi4+0x2be>
 800041e:	1a84      	subs	r4, r0, r2
 8000420:	eb65 0203 	sbc.w	r2, r5, r3
 8000424:	2001      	movs	r0, #1
 8000426:	4617      	mov	r7, r2
 8000428:	2e00      	cmp	r6, #0
 800042a:	d0e2      	beq.n	80003f2 <__udivmoddi4+0xa2>
 800042c:	e9c6 4700 	strd	r4, r7, [r6]
 8000430:	e7df      	b.n	80003f2 <__udivmoddi4+0xa2>
 8000432:	b902      	cbnz	r2, 8000436 <__udivmoddi4+0xe6>
 8000434:	deff      	udf	#255	; 0xff
 8000436:	fab2 f382 	clz	r3, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	f040 8090 	bne.w	8000560 <__udivmoddi4+0x210>
 8000440:	1a8a      	subs	r2, r1, r2
 8000442:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000446:	fa1f fe8c 	uxth.w	lr, ip
 800044a:	2101      	movs	r1, #1
 800044c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000450:	fb07 2015 	mls	r0, r7, r5, r2
 8000454:	0c22      	lsrs	r2, r4, #16
 8000456:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800045a:	fb0e f005 	mul.w	r0, lr, r5
 800045e:	4290      	cmp	r0, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x124>
 8000462:	eb1c 0202 	adds.w	r2, ip, r2
 8000466:	f105 38ff 	add.w	r8, r5, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4290      	cmp	r0, r2
 800046e:	f200 80cb 	bhi.w	8000608 <__udivmoddi4+0x2b8>
 8000472:	4645      	mov	r5, r8
 8000474:	1a12      	subs	r2, r2, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb2 f0f7 	udiv	r0, r2, r7
 800047c:	fb07 2210 	mls	r2, r7, r0, r2
 8000480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000484:	fb0e fe00 	mul.w	lr, lr, r0
 8000488:	45a6      	cmp	lr, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x14e>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 32ff 	add.w	r2, r0, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x14c>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f200 80bb 	bhi.w	8000612 <__udivmoddi4+0x2c2>
 800049c:	4610      	mov	r0, r2
 800049e:	eba4 040e 	sub.w	r4, r4, lr
 80004a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004a6:	e79f      	b.n	80003e8 <__udivmoddi4+0x98>
 80004a8:	f1c1 0720 	rsb	r7, r1, #32
 80004ac:	408b      	lsls	r3, r1
 80004ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80004b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004b6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ba:	fa20 f307 	lsr.w	r3, r0, r7
 80004be:	40fd      	lsrs	r5, r7
 80004c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004c4:	4323      	orrs	r3, r4
 80004c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ca:	fa1f fe8c 	uxth.w	lr, ip
 80004ce:	fb09 5518 	mls	r5, r9, r8, r5
 80004d2:	0c1c      	lsrs	r4, r3, #16
 80004d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004d8:	fb08 f50e 	mul.w	r5, r8, lr
 80004dc:	42a5      	cmp	r5, r4
 80004de:	fa02 f201 	lsl.w	r2, r2, r1
 80004e2:	fa00 f001 	lsl.w	r0, r0, r1
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f0:	f080 8088 	bcs.w	8000604 <__udivmoddi4+0x2b4>
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	f240 8085 	bls.w	8000604 <__udivmoddi4+0x2b4>
 80004fa:	f1a8 0802 	sub.w	r8, r8, #2
 80004fe:	4464      	add	r4, ip
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	b29d      	uxth	r5, r3
 8000504:	fbb4 f3f9 	udiv	r3, r4, r9
 8000508:	fb09 4413 	mls	r4, r9, r3, r4
 800050c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000510:	fb03 fe0e 	mul.w	lr, r3, lr
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000520:	d26c      	bcs.n	80005fc <__udivmoddi4+0x2ac>
 8000522:	45a6      	cmp	lr, r4
 8000524:	d96a      	bls.n	80005fc <__udivmoddi4+0x2ac>
 8000526:	3b02      	subs	r3, #2
 8000528:	4464      	add	r4, ip
 800052a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800052e:	fba3 9502 	umull	r9, r5, r3, r2
 8000532:	eba4 040e 	sub.w	r4, r4, lr
 8000536:	42ac      	cmp	r4, r5
 8000538:	46c8      	mov	r8, r9
 800053a:	46ae      	mov	lr, r5
 800053c:	d356      	bcc.n	80005ec <__udivmoddi4+0x29c>
 800053e:	d053      	beq.n	80005e8 <__udivmoddi4+0x298>
 8000540:	b156      	cbz	r6, 8000558 <__udivmoddi4+0x208>
 8000542:	ebb0 0208 	subs.w	r2, r0, r8
 8000546:	eb64 040e 	sbc.w	r4, r4, lr
 800054a:	fa04 f707 	lsl.w	r7, r4, r7
 800054e:	40ca      	lsrs	r2, r1
 8000550:	40cc      	lsrs	r4, r1
 8000552:	4317      	orrs	r7, r2
 8000554:	e9c6 7400 	strd	r7, r4, [r6]
 8000558:	4618      	mov	r0, r3
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	f1c3 0120 	rsb	r1, r3, #32
 8000564:	fa02 fc03 	lsl.w	ip, r2, r3
 8000568:	fa20 f201 	lsr.w	r2, r0, r1
 800056c:	fa25 f101 	lsr.w	r1, r5, r1
 8000570:	409d      	lsls	r5, r3
 8000572:	432a      	orrs	r2, r5
 8000574:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000580:	fb07 1510 	mls	r5, r7, r0, r1
 8000584:	0c11      	lsrs	r1, r2, #16
 8000586:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800058a:	fb00 f50e 	mul.w	r5, r0, lr
 800058e:	428d      	cmp	r5, r1
 8000590:	fa04 f403 	lsl.w	r4, r4, r3
 8000594:	d908      	bls.n	80005a8 <__udivmoddi4+0x258>
 8000596:	eb1c 0101 	adds.w	r1, ip, r1
 800059a:	f100 38ff 	add.w	r8, r0, #4294967295
 800059e:	d22f      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005a0:	428d      	cmp	r5, r1
 80005a2:	d92d      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005a4:	3802      	subs	r0, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1b49      	subs	r1, r1, r5
 80005aa:	b292      	uxth	r2, r2
 80005ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80005b0:	fb07 1115 	mls	r1, r7, r5, r1
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	fb05 f10e 	mul.w	r1, r5, lr
 80005bc:	4291      	cmp	r1, r2
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x282>
 80005c0:	eb1c 0202 	adds.w	r2, ip, r2
 80005c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005c8:	d216      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 80005ca:	4291      	cmp	r1, r2
 80005cc:	d914      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 80005ce:	3d02      	subs	r5, #2
 80005d0:	4462      	add	r2, ip
 80005d2:	1a52      	subs	r2, r2, r1
 80005d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005d8:	e738      	b.n	800044c <__udivmoddi4+0xfc>
 80005da:	4631      	mov	r1, r6
 80005dc:	4630      	mov	r0, r6
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xa2>
 80005e0:	4639      	mov	r1, r7
 80005e2:	e6e6      	b.n	80003b2 <__udivmoddi4+0x62>
 80005e4:	4610      	mov	r0, r2
 80005e6:	e6fb      	b.n	80003e0 <__udivmoddi4+0x90>
 80005e8:	4548      	cmp	r0, r9
 80005ea:	d2a9      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005ec:	ebb9 0802 	subs.w	r8, r9, r2
 80005f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005f4:	3b01      	subs	r3, #1
 80005f6:	e7a3      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f8:	4645      	mov	r5, r8
 80005fa:	e7ea      	b.n	80005d2 <__udivmoddi4+0x282>
 80005fc:	462b      	mov	r3, r5
 80005fe:	e794      	b.n	800052a <__udivmoddi4+0x1da>
 8000600:	4640      	mov	r0, r8
 8000602:	e7d1      	b.n	80005a8 <__udivmoddi4+0x258>
 8000604:	46d0      	mov	r8, sl
 8000606:	e77b      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000608:	3d02      	subs	r5, #2
 800060a:	4462      	add	r2, ip
 800060c:	e732      	b.n	8000474 <__udivmoddi4+0x124>
 800060e:	4608      	mov	r0, r1
 8000610:	e70a      	b.n	8000428 <__udivmoddi4+0xd8>
 8000612:	4464      	add	r4, ip
 8000614:	3802      	subs	r0, #2
 8000616:	e742      	b.n	800049e <__udivmoddi4+0x14e>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fba0 	bl	8000d64 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000624:	f000 fa1e 	bl	8000a64 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f834 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8dc 	bl	80007e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000630:	f000 f88e 	bl	8000750 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000634:	f004 ff62 	bl	80054fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinky01 */
  blinky01Handle = osThreadNew(StartBlinky01, NULL, &blinky01_attributes);
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x54>)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x58>)
 800063e:	f004 ffa7 	bl	8005590 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <main+0x5c>)
 8000646:	6013      	str	r3, [r2, #0]

  /* creation of blinky02 */
  blinky02Handle = osThreadNew(StartBlinky02, NULL, &blinky02_attributes);
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <main+0x60>)
 800064a:	2100      	movs	r1, #0
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x64>)
 800064e:	f004 ff9f 	bl	8005590 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <main+0x68>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of blinky03 */
  blinky03Handle = osThreadNew(StartBlinky03, NULL, &blinky03_attributes);
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x6c>)
 800065a:	2100      	movs	r1, #0
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x70>)
 800065e:	f004 ff97 	bl	8005590 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <main+0x74>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f004 ff6c 	bl	8005544 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x50>
 800066e:	bf00      	nop
 8000670:	080080dc 	.word	0x080080dc
 8000674:	080008bd 	.word	0x080008bd
 8000678:	240000c4 	.word	0x240000c4
 800067c:	08008100 	.word	0x08008100
 8000680:	08000949 	.word	0x08000949
 8000684:	240000c8 	.word	0x240000c8
 8000688:	08008124 	.word	0x08008124
 800068c:	080009d5 	.word	0x080009d5
 8000690:	240000cc 	.word	0x240000cc

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	; 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	224c      	movs	r2, #76	; 0x4c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fc7a 	bl	8007f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2220      	movs	r2, #32
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fc74 	bl	8007f9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006b4:	2002      	movs	r0, #2
 80006b6:	f000 ff23 	bl	8001500 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xb8>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c6:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xb8>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xb8>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006da:	bf00      	nop
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <SystemClock_Config+0xb8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e8:	d1f8      	bne.n	80006dc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff38 	bl	8001574 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800070a:	f000 f9d7 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	233f      	movs	r3, #63	; 0x3f
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f001 faf8 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800073e:	f000 f9bd 	bl	8000abc <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3770      	adds	r7, #112	; 0x70
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58024800 	.word	0x58024800

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_USART3_UART_Init+0x94>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000798:	4811      	ldr	r0, [pc, #68]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 800079a:	f003 fc13 	bl	8003fc4 <HAL_UART_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f98a 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 80007ac:	f004 fda7 	bl	80052fe <HAL_UARTEx_SetTxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007b6:	f000 f981 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 80007be:	f004 fddc 	bl	800537a <HAL_UARTEx_SetRxFifoThreshold>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007c8:	f000 f978 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_USART3_UART_Init+0x90>)
 80007ce:	f004 fd5d 	bl	800528c <HAL_UARTEx_DisableFifoMode>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007d8:	f000 f970 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	24000030 	.word	0x24000030
 80007e4:	40004800 	.word	0x40004800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a2a      	ldr	r2, [pc, #168]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <MX_GPIO_Init+0xc8>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_GPIO_Init+0xc8>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f244 0101 	movw	r1, #16385	; 0x4001
 800085e:	4815      	ldr	r0, [pc, #84]	; (80008b4 <MX_GPIO_Init+0xcc>)
 8000860:	f000 fe1a 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2102      	movs	r1, #2
 8000868:	4813      	ldr	r0, [pc, #76]	; (80008b8 <MX_GPIO_Init+0xd0>)
 800086a:	f000 fe15 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 800086e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0xcc>)
 8000888:	f000 fc5e 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800088c:	2302      	movs	r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0xd0>)
 80008a4:	f000 fc50 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024400 	.word	0x58024400
 80008b4:	58020400 	.word	0x58020400
 80008b8:	58021000 	.word	0x58021000

080008bc <StartBlinky01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinky01 */
void StartBlinky01(void *argument)
{
 80008bc:	b5b0      	push	{r4, r5, r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t buf[20];
  /* Infinite loop */
  for(;;)
  {
	strcpy((char*)buf, "Turning on LED 1\r\n");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <StartBlinky01+0x7c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	8022      	strh	r2, [r4, #0]
 80008d8:	3402      	adds	r4, #2
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fd14 	bl	8000310 <strlen>
 80008e8:	4603      	mov	r3, r0
 80008ea:	b29a      	uxth	r2, r3
 80008ec:	f107 010c 	add.w	r1, r7, #12
 80008f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <StartBlinky01+0x80>)
 80008f6:	f003 fbb5 	bl	8004064 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008fa:	2101      	movs	r1, #1
 80008fc:	4810      	ldr	r0, [pc, #64]	; (8000940 <StartBlinky01+0x84>)
 80008fe:	f000 fde4 	bl	80014ca <HAL_GPIO_TogglePin>
    osDelay(500);
 8000902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000906:	f004 fed5 	bl	80056b4 <osDelay>
	strcpy((char*)buf, "Turning off LED 1\r\n");
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <StartBlinky01+0x88>)
 800090c:	f107 040c 	add.w	r4, r7, #12
 8000910:	461d      	mov	r5, r3
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fcf6 	bl	8000310 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	f107 010c 	add.w	r1, r7, #12
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <StartBlinky01+0x80>)
 8000932:	f003 fb97 	bl	8004064 <HAL_UART_Transmit>
	strcpy((char*)buf, "Turning on LED 1\r\n");
 8000936:	e7c5      	b.n	80008c4 <StartBlinky01+0x8>
 8000938:	0800804c 	.word	0x0800804c
 800093c:	24000030 	.word	0x24000030
 8000940:	58020400 	.word	0x58020400
 8000944:	08008060 	.word	0x08008060

08000948 <StartBlinky02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinky02 */
void StartBlinky02(void *argument)
{
 8000948:	b5b0      	push	{r4, r5, r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinky02 */
	uint8_t buf[20];
  /* Infinite loop */
  for(;;)
  {
	strcpy((char*)buf, "!!!!!!!!!!!!!!!!\r\n");
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <StartBlinky02+0x7c>)
 8000956:	461c      	mov	r4, r3
 8000958:	4615      	mov	r5, r2
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	8022      	strh	r2, [r4, #0]
 8000964:	3402      	adds	r4, #2
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fcce 	bl	8000310 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	f107 010c 	add.w	r1, r7, #12
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <StartBlinky02+0x80>)
 8000982:	f003 fb6f 	bl	8004064 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000986:	2102      	movs	r1, #2
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <StartBlinky02+0x84>)
 800098a:	f000 fd9e 	bl	80014ca <HAL_GPIO_TogglePin>
	osDelay(750);
 800098e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000992:	f004 fe8f 	bl	80056b4 <osDelay>
	strcpy((char*)buf, "Turning off LED 2\r\n");
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <StartBlinky02+0x88>)
 8000998:	f107 040c 	add.w	r4, r7, #12
 800099c:	461d      	mov	r5, r3
 800099e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fcb0 	bl	8000310 <strlen>
 80009b0:	4603      	mov	r3, r0
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	f107 010c 	add.w	r1, r7, #12
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <StartBlinky02+0x80>)
 80009be:	f003 fb51 	bl	8004064 <HAL_UART_Transmit>
	strcpy((char*)buf, "!!!!!!!!!!!!!!!!\r\n");
 80009c2:	e7c5      	b.n	8000950 <StartBlinky02+0x8>
 80009c4:	08008074 	.word	0x08008074
 80009c8:	24000030 	.word	0x24000030
 80009cc:	58021000 	.word	0x58021000
 80009d0:	08008088 	.word	0x08008088

080009d4 <StartBlinky03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinky03 */
void StartBlinky03(void *argument)
{
 80009d4:	b5b0      	push	{r4, r5, r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinky03 */
	uint8_t buf[20];
  /* Infinite loop */
  for(;;)
  {
	strcpy((char*)buf, "Turning on LED 3\r\n");
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <StartBlinky03+0x80>)
 80009e2:	461c      	mov	r4, r3
 80009e4:	4615      	mov	r5, r2
 80009e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ea:	682b      	ldr	r3, [r5, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	8022      	strh	r2, [r4, #0]
 80009f0:	3402      	adds	r4, #2
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc88 	bl	8000310 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f107 010c 	add.w	r1, r7, #12
 8000a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <StartBlinky03+0x84>)
 8000a0e:	f003 fb29 	bl	8004064 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a16:	4811      	ldr	r0, [pc, #68]	; (8000a5c <StartBlinky03+0x88>)
 8000a18:	f000 fd57 	bl	80014ca <HAL_GPIO_TogglePin>
	  osDelay(600);
 8000a1c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000a20:	f004 fe48 	bl	80056b4 <osDelay>
	  strcpy((char*)buf, "Turning off LED 3\r\n");
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <StartBlinky03+0x8c>)
 8000a26:	f107 040c 	add.w	r4, r7, #12
 8000a2a:	461d      	mov	r5, r3
 8000a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	6023      	str	r3, [r4, #0]
	  HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), 1000);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc69 	bl	8000310 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f107 010c 	add.w	r1, r7, #12
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <StartBlinky03+0x84>)
 8000a4c:	f003 fb0a 	bl	8004064 <HAL_UART_Transmit>
	strcpy((char*)buf, "Turning on LED 3\r\n");
 8000a50:	e7c4      	b.n	80009dc <StartBlinky03+0x8>
 8000a52:	bf00      	nop
 8000a54:	0800809c 	.word	0x0800809c
 8000a58:	24000030 	.word	0x24000030
 8000a5c:	58020400 	.word	0x58020400
 8000a60:	080080b0 	.word	0x080080b0

08000a64 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a76:	f000 faeb 	bl	8001050 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a86:	231f      	movs	r3, #31
 8000a88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a8a:	2387      	movs	r3, #135	; 0x87
 8000a8c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a92:	2300      	movs	r3, #0
 8000a94:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fb09 	bl	80010c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f000 fae6 	bl	8001080 <HAL_MPU_Enable>

}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x38>)
 8000ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_MspInit+0x38>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x38>)
 8000ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aec:	2200      	movs	r2, #0
 8000aee:	210f      	movs	r1, #15
 8000af0:	f06f 0001 	mvn.w	r0, #1
 8000af4:	f000 fa85 	bl	8001002 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b8      	sub	sp, #224	; 0xe0
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	22b8      	movs	r2, #184	; 0xb8
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 fa39 	bl	8007f9c <memset>
  if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d146      	bne.n	8000bc2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f04f 0202 	mov.w	r2, #2
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fc78 	bl	8002440 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b56:	f7ff ffb1 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <HAL_UART_MspInit+0xd0>)
 8000bbe:	f000 fac3 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	37e0      	adds	r7, #224	; 0xe0
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004800 	.word	0x40004800
 8000bd0:	58024400 	.word	0x58024400
 8000bd4:	58020c00 	.word	0x58020c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f91e 	bl	8000e48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c0c:	f006 f960 	bl	8006ed0 <xTaskGetSchedulerState>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d001      	beq.n	8000c1a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c16:	f006 ff47 	bl	8007aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <SystemInit+0xd0>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <SystemInit+0xd0>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c34:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <SystemInit+0xd4>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d807      	bhi.n	8000c50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <SystemInit+0xd4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <SystemInit+0xd4>)
 8000c4a:	f043 0307 	orr.w	r3, r3, #7
 8000c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c50:	4b29      	ldr	r3, [pc, #164]	; (8000cf8 <SystemInit+0xd8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a28      	ldr	r2, [pc, #160]	; (8000cf8 <SystemInit+0xd8>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c5c:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <SystemInit+0xd8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <SystemInit+0xd8>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4924      	ldr	r1, [pc, #144]	; (8000cf8 <SystemInit+0xd8>)
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <SystemInit+0xdc>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <SystemInit+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d007      	beq.n	8000c8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <SystemInit+0xd4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SystemInit+0xd4>)
 8000c84:	f043 0307 	orr.w	r3, r3, #7
 8000c88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <SystemInit+0xd8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <SystemInit+0xd8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <SystemInit+0xd8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <SystemInit+0xd8>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <SystemInit+0xe0>)
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <SystemInit+0xd8>)
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <SystemInit+0xe4>)
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <SystemInit+0xd8>)
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <SystemInit+0xe8>)
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <SystemInit+0xd8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <SystemInit+0xd8>)
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <SystemInit+0xe8>)
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <SystemInit+0xd8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <SystemInit+0xd8>)
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <SystemInit+0xe8>)
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <SystemInit+0xd8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <SystemInit+0xd8>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <SystemInit+0xd8>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <SystemInit+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <SystemInit+0xec>)
 8000ce0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ce4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00
 8000cf4:	52002000 	.word	0x52002000
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d00:	02020200 	.word	0x02020200
 8000d04:	01ff0000 	.word	0x01ff0000
 8000d08:	01010280 	.word	0x01010280
 8000d0c:	52004000 	.word	0x52004000

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d14:	f7ff ff84 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f007 f935 	bl	8007fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fc6b 	bl	800061c <main>
  bx  lr
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d48:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000d4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d50:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d54:	08008190 	.word	0x08008190
  ldr r2, =_sbss
 8000d58:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d5c:	24004a24 	.word	0x24004a24

08000d60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC3_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f93e 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d70:	f001 f990 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8000d74:	4602      	mov	r2, r0
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_Init+0x68>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	4913      	ldr	r1, [pc, #76]	; (8000dd0 <HAL_Init+0x6c>)
 8000d82:	5ccb      	ldrb	r3, [r1, r3]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_Init+0x68>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_Init+0x6c>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	fa22 f303 	lsr.w	r3, r2, r3
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_Init+0x70>)
 8000da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_Init+0x74>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f814 	bl	8000ddc <HAL_InitTick>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e002      	b.n	8000dc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fe83 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	08008148 	.word	0x08008148
 8000dd4:	24000004 	.word	0x24000004
 8000dd8:	24000000 	.word	0x24000000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_InitTick+0x60>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e021      	b.n	8000e34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_InitTick+0x64>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_InitTick+0x60>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f915 	bl	8001036 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f8ed 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x68>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2400000c 	.word	0x2400000c
 8000e40:	24000000 	.word	0x24000000
 8000e44:	24000008 	.word	0x24000008

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	2400000c 	.word	0x2400000c
 8000e6c:	240000d0 	.word	0x240000d0

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	240000d0 	.word	0x240000d0

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	05fa0000 	.word	0x05fa0000

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff47 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff5e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff90 	bl	8000f40 <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5f 	bl	8000eec <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffb2 	bl	8000fa8 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001054:	f3bf 8f5f 	dmb	sy
}
 8001058:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <HAL_MPU_Disable+0x28>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_MPU_Disable+0x28>)
 8001060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001064:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001066:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_MPU_Disable+0x2c>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00
 800107c:	e000ed90 	.word	0xe000ed90

08001080 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001088:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_MPU_Enable+0x38>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_MPU_Enable+0x3c>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_MPU_Enable+0x3c>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
}
 80010a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010a4:	f3bf 8f6f 	isb	sy
}
 80010a8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed90 	.word	0xe000ed90
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	785a      	ldrb	r2, [r3, #1]
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_MPU_ConfigRegion+0x84>)
 80010ce:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d029      	beq.n	800112c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80010d8:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <HAL_MPU_ConfigRegion+0x84>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7b1b      	ldrb	r3, [r3, #12]
 80010e4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7adb      	ldrb	r3, [r3, #11]
 80010ea:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7a9b      	ldrb	r3, [r3, #10]
 80010f2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80010f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
 80010fa:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80010fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7b9b      	ldrb	r3, [r3, #14]
 8001102:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001104:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7bdb      	ldrb	r3, [r3, #15]
 800110a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800110c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7a5b      	ldrb	r3, [r3, #9]
 8001112:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001114:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7a1b      	ldrb	r3, [r3, #8]
 800111a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800111c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	7812      	ldrb	r2, [r2, #0]
 8001122:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001126:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001128:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800112a:	e005      	b.n	8001138 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <HAL_MPU_ConfigRegion+0x84>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_MPU_ConfigRegion+0x84>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed90 	.word	0xe000ed90

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001156:	4b86      	ldr	r3, [pc, #536]	; (8001370 <HAL_GPIO_Init+0x228>)
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115a:	e18c      	b.n	8001476 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 817e 	beq.w	8001470 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d005      	beq.n	800118c <HAL_GPIO_Init+0x44>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 0201 	and.w	r2, r3, #1
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d017      	beq.n	800122a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0203 	and.w	r2, r3, #3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80d8 	beq.w	8001470 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <HAL_GPIO_Init+0x22c>)
 80012c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c6:	4a2b      	ldr	r2, [pc, #172]	; (8001374 <HAL_GPIO_Init+0x22c>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_GPIO_Init+0x22c>)
 80012d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x230>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_GPIO_Init+0x234>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d04a      	beq.n	80013a0 <HAL_GPIO_Init+0x258>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_GPIO_Init+0x238>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x222>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x23c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x240>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_GPIO_Init+0x244>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_GPIO_Init+0x248>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_GPIO_Init+0x24c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_GPIO_Init+0x250>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x20a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a15      	ldr	r2, [pc, #84]	; (800139c <HAL_GPIO_Init+0x254>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x206>
 800134a:	2309      	movs	r3, #9
 800134c:	e029      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 800134e:	230a      	movs	r3, #10
 8001350:	e027      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 8001352:	2307      	movs	r3, #7
 8001354:	e025      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 8001356:	2306      	movs	r3, #6
 8001358:	e023      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 800135a:	2305      	movs	r3, #5
 800135c:	e021      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 800135e:	2304      	movs	r3, #4
 8001360:	e01f      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 8001362:	2303      	movs	r3, #3
 8001364:	e01d      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 8001366:	2302      	movs	r3, #2
 8001368:	e01b      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 800136a:	2301      	movs	r3, #1
 800136c:	e019      	b.n	80013a2 <HAL_GPIO_Init+0x25a>
 800136e:	bf00      	nop
 8001370:	58000080 	.word	0x58000080
 8001374:	58024400 	.word	0x58024400
 8001378:	58000400 	.word	0x58000400
 800137c:	58020000 	.word	0x58020000
 8001380:	58020400 	.word	0x58020400
 8001384:	58020800 	.word	0x58020800
 8001388:	58020c00 	.word	0x58020c00
 800138c:	58021000 	.word	0x58021000
 8001390:	58021400 	.word	0x58021400
 8001394:	58021800 	.word	0x58021800
 8001398:	58021c00 	.word	0x58021c00
 800139c:	58022400 	.word	0x58022400
 80013a0:	2300      	movs	r3, #0
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	f002 0203 	and.w	r2, r2, #3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4093      	lsls	r3, r2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b2:	4938      	ldr	r1, [pc, #224]	; (8001494 <HAL_GPIO_Init+0x34c>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3301      	adds	r3, #1
 8001474:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	f47f ae6b 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	58000400 	.word	0x58000400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	041a      	lsls	r2, r3, #16
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	400b      	ands	r3, r1
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_PWREx_ConfigSupply+0x70>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b04      	cmp	r3, #4
 8001512:	d00a      	beq.n	800152a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_PWREx_ConfigSupply+0x70>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	429a      	cmp	r2, r3
 8001520:	d001      	beq.n	8001526 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e01f      	b.n	8001566 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e01d      	b.n	8001566 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_PWREx_ConfigSupply+0x70>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f023 0207 	bic.w	r2, r3, #7
 8001532:	490f      	ldr	r1, [pc, #60]	; (8001570 <HAL_PWREx_ConfigSupply+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4313      	orrs	r3, r2
 8001538:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800153a:	f7ff fc99 	bl	8000e70 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001540:	e009      	b.n	8001556 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001542:	f7ff fc95 	bl	8000e70 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001550:	d901      	bls.n	8001556 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e007      	b.n	8001566 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_PWREx_ConfigSupply+0x70>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800155e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001562:	d1ee      	bne.n	8001542 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	58024800 	.word	0x58024800

08001574 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e3c8      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8087 	beq.w	80016a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001594:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800159e:	4b86      	ldr	r3, [pc, #536]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x46>
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	2b18      	cmp	r3, #24
 80015ae:	d110      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d06c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x12c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d168      	bne.n	80016a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3a2      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015da:	d106      	bne.n	80015ea <HAL_RCC_OscConfig+0x76>
 80015dc:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e02e      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10c      	bne.n	800160c <HAL_RCC_OscConfig+0x98>
 80015f2:	4b71      	ldr	r3, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a70      	ldr	r2, [pc, #448]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80015f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6d      	ldr	r2, [pc, #436]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001604:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0xbc>
 8001616:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a67      	ldr	r2, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xd4>
 8001630:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a60      	ldr	r2, [pc, #384]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a5d      	ldr	r2, [pc, #372]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d013      	beq.n	8001678 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fc0e 	bl	8000e70 <HAL_GetTick>
 8001654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc0a 	bl	8000e70 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e356      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0xe4>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fbfa 	bl	8000e70 <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001680:	f7ff fbf6 	bl	8000e70 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e342      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001692:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x10c>
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 808c 	beq.w	80017c8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016b0:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_RCC_OscConfig+0x162>
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b18      	cmp	r3, #24
 80016ca:	d137      	bne.n	800173c <HAL_RCC_OscConfig+0x1c8>
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d132      	bne.n	800173c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d6:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x17a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e314      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ee:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0219 	bic.w	r2, r3, #25
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fbb6 	bl	8000e70 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fbb2 	bl	8000e70 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e2fe      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	061b      	lsls	r3, r3, #24
 8001734:	4920      	ldr	r1, [pc, #128]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173a:	e045      	b.n	80017c8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d026      	beq.n	8001792 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001744:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0219 	bic.w	r2, r3, #25
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4919      	ldr	r1, [pc, #100]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb8b 	bl	8000e70 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fb87 	bl	8000e70 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e2d3      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	490b      	ldr	r1, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e01a      	b.n	80017c8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_RCC_OscConfig+0x244>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fb67 	bl	8000e70 <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb63 	bl	8000e70 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d903      	bls.n	80017bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e2af      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
 80017b8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017bc:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d06a      	beq.n	80018aa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d4:	4b90      	ldr	r3, [pc, #576]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017dc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017de:	4b8e      	ldr	r3, [pc, #568]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d007      	beq.n	80017fa <HAL_RCC_OscConfig+0x286>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b18      	cmp	r3, #24
 80017ee:	d11b      	bne.n	8001828 <HAL_RCC_OscConfig+0x2b4>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fa:	4b87      	ldr	r3, [pc, #540]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x29e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e282      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001812:	4b81      	ldr	r3, [pc, #516]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	061b      	lsls	r3, r3, #24
 8001820:	497d      	ldr	r1, [pc, #500]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001826:	e040      	b.n	80018aa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d023      	beq.n	8001878 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001830:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a78      	ldr	r2, [pc, #480]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fb18 	bl	8000e70 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001844:	f7ff fb14 	bl	8000e70 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e260      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001856:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	061b      	lsls	r3, r3, #24
 8001870:	4969      	ldr	r1, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e018      	b.n	80018aa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001878:	4b67      	ldr	r3, [pc, #412]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800187e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff faf4 	bl	8000e70 <HAL_GetTick>
 8001888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800188c:	f7ff faf0 	bl	8000e70 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e23c      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800189e:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d036      	beq.n	8001924 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b56      	ldr	r3, [pc, #344]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c2:	4a55      	ldr	r2, [pc, #340]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ca:	f7ff fad1 	bl	8000e70 <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d2:	f7ff facd 	bl	8000e70 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e219      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x35e>
 80018f0:	e018      	b.n	8001924 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fe:	f7ff fab7 	bl	8000e70 <HAL_GetTick>
 8001902:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001906:	f7ff fab3 	bl	8000e70 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1ff      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001918:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d036      	beq.n	800199e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d019      	beq.n	800196c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001938:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a36      	ldr	r2, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800193e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001944:	f7ff fa94 	bl	8000e70 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa90 	bl	8000e70 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1dc      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x3d8>
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001976:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001978:	f7ff fa7a 	bl	8000e70 <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff fa76 	bl	8000e70 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1c2      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001992:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8086 	beq.w	8001ab8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x4a8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <HAL_RCC_OscConfig+0x4a8>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019b8:	f7ff fa5a 	bl	8000e70 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff fa56 	bl	8000e70 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1a2      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x4a8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x480>
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e6>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x4ac>
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	4a02      	ldr	r2, [pc, #8]	; (8001a18 <HAL_RCC_OscConfig+0x4a4>)
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	6713      	str	r3, [r2, #112]	; 0x70
 8001a14:	e021      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e6>
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58024800 	.word	0x58024800
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4ce>
 8001a28:	4b83      	ldr	r3, [pc, #524]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a82      	ldr	r2, [pc, #520]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a7f      	ldr	r2, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x4e6>
 8001a42:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a52:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa05 	bl	8000e70 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa01 	bl	8000e70 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e14b      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x4f6>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7ff f9ef 	bl	8000e70 <HAL_GetTick>
 8001a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7ff f9eb 	bl	8000e70 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e135      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aac:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 812a 	beq.w	8001d16 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aca:	2b18      	cmp	r3, #24
 8001acc:	f000 80ba 	beq.w	8001c44 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	f040 8095 	bne.w	8001c04 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f9c3 	bl	8000e70 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f9bf 	bl	8000e70 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e10b      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x6c8>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	4945      	ldr	r1, [pc, #276]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	628b      	str	r3, [r1, #40]	; 0x28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b34:	3b01      	subs	r3, #1
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	3b01      	subs	r3, #1
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b56:	4938      	ldr	r1, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b5c:	4b36      	ldr	r3, [pc, #216]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	4a35      	ldr	r2, [pc, #212]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_OscConfig+0x6cc>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	4930      	ldr	r1, [pc, #192]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f023 020c 	bic.w	r2, r3, #12
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	492b      	ldr	r1, [pc, #172]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f023 0202 	bic.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4a24      	ldr	r2, [pc, #144]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f948 	bl	8000e70 <HAL_GetTick>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f944 	bl	8000e70 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e090      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x670>
 8001c02:	e088      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f92e 	bl	8000e70 <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f92a 	bl	8000e70 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e076      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c2a:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_RCC_OscConfig+0x6c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x6a4>
 8001c36:	e06e      	b.n	8001d16 <HAL_RCC_OscConfig+0x7a2>
 8001c38:	58024400 	.word	0x58024400
 8001c3c:	fffffc0c 	.word	0xfffffc0c
 8001c40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c4a:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d031      	beq.n	8001cbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d12a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d122      	bne.n	8001cbc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d11a      	bne.n	8001cbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d111      	bne.n	8001cbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0c1b      	lsrs	r3, r3, #16
 8001c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0e1b      	lsrs	r3, r3, #24
 8001cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e02b      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d01f      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce2:	f7ff f8c5 	bl	8000e70 <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ce8:	bf00      	nop
 8001cea:	f7ff f8c1 	bl	8000e70 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d0f9      	beq.n	8001cea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_OscConfig+0x7b0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d02:	00d2      	lsls	r2, r2, #3
 8001d04:	4906      	ldr	r1, [pc, #24]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <HAL_RCC_OscConfig+0x7ac>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58024400 	.word	0x58024400
 8001d24:	ffff0007 	.word	0xffff0007

08001d28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e19c      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b8a      	ldr	r3, [pc, #552]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b87      	ldr	r3, [pc, #540]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	4985      	ldr	r1, [pc, #532]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e184      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d010      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d908      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d88:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4975      	ldr	r1, [pc, #468]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d010      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	4b70      	ldr	r3, [pc, #448]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d908      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001db6:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	496a      	ldr	r1, [pc, #424]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	4b64      	ldr	r3, [pc, #400]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d908      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	495e      	ldr	r1, [pc, #376]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	4b59      	ldr	r3, [pc, #356]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e12:	4b56      	ldr	r3, [pc, #344]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4953      	ldr	r1, [pc, #332]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b4d      	ldr	r3, [pc, #308]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d908      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f023 020f 	bic.w	r2, r3, #15
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4947      	ldr	r1, [pc, #284]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d055      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4940      	ldr	r1, [pc, #256]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e78:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d121      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0f6      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d115      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0ea      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0de      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0d6      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	f023 0207 	bic.w	r2, r3, #7
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4925      	ldr	r1, [pc, #148]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eda:	f7fe ffc9 	bl	8000e70 <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7fe ffc5 	bl	8000e70 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0be      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d1eb      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d208      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f023 020f 	bic.w	r2, r3, #15
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	490e      	ldr	r1, [pc, #56]	; (8001f6c <HAL_RCC_ClockConfig+0x244>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d214      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 020f 	bic.w	r2, r3, #15
 8001f4e:	4906      	ldr	r1, [pc, #24]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <HAL_RCC_ClockConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e086      	b.n	8002076 <HAL_RCC_ClockConfig+0x34e>
 8001f68:	52002000 	.word	0x52002000
 8001f6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d208      	bcs.n	8001f9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4939      	ldr	r1, [pc, #228]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d208      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	492e      	ldr	r1, [pc, #184]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d208      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4917      	ldr	r1, [pc, #92]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8002024:	4313      	orrs	r3, r2
 8002026:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002028:	f000 f834 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	4912      	ldr	r1, [pc, #72]	; (8002084 <HAL_RCC_ClockConfig+0x35c>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x358>)
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <HAL_RCC_ClockConfig+0x35c>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	f003 031f 	and.w	r3, r3, #31
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <HAL_RCC_ClockConfig+0x360>)
 800205e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x364>)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x368>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe feb6 	bl	8000ddc <HAL_InitTick>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	58024400 	.word	0x58024400
 8002084:	08008148 	.word	0x08008148
 8002088:	24000004 	.word	0x24000004
 800208c:	24000000 	.word	0x24000000
 8002090:	24000008 	.word	0x24000008

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209a:	4bb3      	ldr	r3, [pc, #716]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020a2:	2b18      	cmp	r3, #24
 80020a4:	f200 8155 	bhi.w	8002352 <HAL_RCC_GetSysClockFreq+0x2be>
 80020a8:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ae:	bf00      	nop
 80020b0:	08002115 	.word	0x08002115
 80020b4:	08002353 	.word	0x08002353
 80020b8:	08002353 	.word	0x08002353
 80020bc:	08002353 	.word	0x08002353
 80020c0:	08002353 	.word	0x08002353
 80020c4:	08002353 	.word	0x08002353
 80020c8:	08002353 	.word	0x08002353
 80020cc:	08002353 	.word	0x08002353
 80020d0:	0800213b 	.word	0x0800213b
 80020d4:	08002353 	.word	0x08002353
 80020d8:	08002353 	.word	0x08002353
 80020dc:	08002353 	.word	0x08002353
 80020e0:	08002353 	.word	0x08002353
 80020e4:	08002353 	.word	0x08002353
 80020e8:	08002353 	.word	0x08002353
 80020ec:	08002353 	.word	0x08002353
 80020f0:	08002141 	.word	0x08002141
 80020f4:	08002353 	.word	0x08002353
 80020f8:	08002353 	.word	0x08002353
 80020fc:	08002353 	.word	0x08002353
 8002100:	08002353 	.word	0x08002353
 8002104:	08002353 	.word	0x08002353
 8002108:	08002353 	.word	0x08002353
 800210c:	08002353 	.word	0x08002353
 8002110:	08002147 	.word	0x08002147
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002114:	4b94      	ldr	r3, [pc, #592]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d009      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002120:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	4a90      	ldr	r2, [pc, #576]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
 8002130:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002132:	e111      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002134:	4b8d      	ldr	r3, [pc, #564]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002136:	61bb      	str	r3, [r7, #24]
      break;
 8002138:	e10e      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800213a:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800213c:	61bb      	str	r3, [r7, #24]
      break;
 800213e:	e10b      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002140:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002142:	61bb      	str	r3, [r7, #24]
      break;
 8002144:	e108      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002146:	4b88      	ldr	r3, [pc, #544]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800215a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800215c:	4b82      	ldr	r3, [pc, #520]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002166:	4b80      	ldr	r3, [pc, #512]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	08db      	lsrs	r3, r3, #3
 800216c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80e1 	beq.w	800234c <HAL_RCC_GetSysClockFreq+0x2b8>
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b02      	cmp	r3, #2
 800218e:	f000 8083 	beq.w	8002298 <HAL_RCC_GetSysClockFreq+0x204>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	f200 80a1 	bhi.w	80022dc <HAL_RCC_GetSysClockFreq+0x248>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x114>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d056      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021a6:	e099      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02d      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	4a6b      	ldr	r2, [pc, #428]	; (800236c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
 80021c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021de:	4b62      	ldr	r3, [pc, #392]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80021f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002378 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800220e:	e087      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800237c <HAL_RCC_GetSysClockFreq+0x2e8>
 800221e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002232:	ed97 6a02 	vldr	s12, [r7, #8]
 8002236:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800223a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002252:	e065      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002276:	ed97 6a02 	vldr	s12, [r7, #8]
 800227a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002378 <HAL_RCC_GetSysClockFreq+0x2e4>
 800227e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800228a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002296:	e043      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002384 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80022be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002378 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022da:	e021      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002380 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002302:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002378 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800231e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	0a5b      	lsrs	r3, r3, #9
 8002326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800232a:	3301      	adds	r3, #1
 800232c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002338:	edd7 6a07 	vldr	s13, [r7, #28]
 800233c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002344:	ee17 3a90 	vmov	r3, s15
 8002348:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800234a:	e005      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
      break;
 8002350:	e002      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002354:	61bb      	str	r3, [r7, #24]
      break;
 8002356:	bf00      	nop
  }

  return sysclockfreq;
 8002358:	69bb      	ldr	r3, [r7, #24]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	58024400 	.word	0x58024400
 800236c:	03d09000 	.word	0x03d09000
 8002370:	003d0900 	.word	0x003d0900
 8002374:	017d7840 	.word	0x017d7840
 8002378:	46000000 	.word	0x46000000
 800237c:	4c742400 	.word	0x4c742400
 8002380:	4a742400 	.word	0x4a742400
 8002384:	4bbebc20 	.word	0x4bbebc20

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800238e:	f7ff fe81 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490f      	ldr	r1, [pc, #60]	; (80023dc <HAL_RCC_GetHCLKFreq+0x54>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_GetHCLKFreq+0x54>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80023c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58024400 	.word	0x58024400
 80023dc:	08008148 	.word	0x08008148
 80023e0:	24000004 	.word	0x24000004
 80023e4:	24000000 	.word	0x24000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023ec:	f7ff ffcc 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58024400 	.word	0x58024400
 8002410:	08008148 	.word	0x08008148

08002414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002418:	f7ff ffb6 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	; (800243c <HAL_RCC_GetPCLK2Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	58024400 	.word	0x58024400
 800243c:	08008148 	.word	0x08008148

08002440 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002444:	b0c6      	sub	sp, #280	; 0x118
 8002446:	af00      	add	r7, sp, #0
 8002448:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002464:	2500      	movs	r5, #0
 8002466:	ea54 0305 	orrs.w	r3, r4, r5
 800246a:	d049      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800246c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002472:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002476:	d02f      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002478:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800247c:	d828      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800247e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002482:	d01a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002488:	d822      	bhi.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800248e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002492:	d007      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002494:	e01c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002496:	4bab      	ldr	r3, [pc, #684]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	4aaa      	ldr	r2, [pc, #680]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024a2:	e01a      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024a8:	3308      	adds	r3, #8
 80024aa:	2102      	movs	r1, #2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fc25 	bl	8003cfc <RCCEx_PLL2_Config>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024b8:	e00f      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024be:	3328      	adds	r3, #40	; 0x28
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fccc 	bl	8003e60 <RCCEx_PLL3_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024ce:	e004      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80024d6:	e000      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024e2:	4b98      	ldr	r3, [pc, #608]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f0:	4a94      	ldr	r2, [pc, #592]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024f2:	430b      	orrs	r3, r1
 80024f4:	6513      	str	r3, [r2, #80]	; 0x50
 80024f6:	e003      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800250c:	f04f 0900 	mov.w	r9, #0
 8002510:	ea58 0309 	orrs.w	r3, r8, r9
 8002514:	d047      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	2b04      	cmp	r3, #4
 800251e:	d82a      	bhi.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002520:	a201      	add	r2, pc, #4	; (adr r2, 8002528 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002526:	bf00      	nop
 8002528:	0800253d 	.word	0x0800253d
 800252c:	0800254b 	.word	0x0800254b
 8002530:	08002561 	.word	0x08002561
 8002534:	0800257f 	.word	0x0800257f
 8002538:	0800257f 	.word	0x0800257f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800253c:	4b81      	ldr	r3, [pc, #516]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002548:	e01a      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800254a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800254e:	3308      	adds	r3, #8
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fbd2 	bl	8003cfc <RCCEx_PLL2_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800255e:	e00f      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002564:	3328      	adds	r3, #40	; 0x28
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fc79 	bl	8003e60 <RCCEx_PLL3_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002574:	e004      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800257e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002580:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002588:	4b6e      	ldr	r3, [pc, #440]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	f023 0107 	bic.w	r1, r3, #7
 8002590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002598:	430b      	orrs	r3, r1
 800259a:	6513      	str	r3, [r2, #80]	; 0x50
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80025a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80025b2:	f04f 0b00 	mov.w	fp, #0
 80025b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80025ba:	d05b      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80025bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025c4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025c8:	d03b      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80025ca:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025ce:	d834      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025d4:	d037      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80025d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025da:	d82e      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025e0:	d033      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80025e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025e6:	d828      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ec:	d01a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80025ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f2:	d822      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80025f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025fc:	d007      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80025fe:	e01c      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800260c:	e01e      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800260e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002612:	3308      	adds	r3, #8
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fb70 	bl	8003cfc <RCCEx_PLL2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002622:	e013      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002628:	3328      	adds	r3, #40	; 0x28
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fc17 	bl	8003e60 <RCCEx_PLL3_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002640:	e004      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002642:	bf00      	nop
 8002644:	e002      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800264a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800264c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002654:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800265c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002660:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002664:	4a37      	ldr	r2, [pc, #220]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002666:	430b      	orrs	r3, r1
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	e003      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800266c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002670:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800268a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800268e:	460b      	mov	r3, r1
 8002690:	4313      	orrs	r3, r2
 8002692:	d05d      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800269c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80026a0:	d03b      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80026a2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80026a6:	d834      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ac:	d037      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80026ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b2:	d82e      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026b8:	d033      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80026ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026be:	d828      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026c4:	d01a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80026c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ca:	d822      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d007      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80026d6:	e01c      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e4:	e01e      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026ea:	3308      	adds	r3, #8
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fb04 	bl	8003cfc <RCCEx_PLL2_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026fa:	e013      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002700:	3328      	adds	r3, #40	; 0x28
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fbab 	bl	8003e60 <RCCEx_PLL3_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002710:	e008      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002718:	e004      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800271a:	bf00      	nop
 800271c:	e002      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800271e:	bf00      	nop
 8002720:	e000      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8002722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002738:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800273c:	4a01      	ldr	r2, [pc, #4]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800273e:	430b      	orrs	r3, r1
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
 8002742:	e005      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800274c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800275c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002760:	2300      	movs	r3, #0
 8002762:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002766:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800276a:	460b      	mov	r3, r1
 800276c:	4313      	orrs	r3, r2
 800276e:	d03a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	2b30      	cmp	r3, #48	; 0x30
 8002778:	d01f      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800277a:	2b30      	cmp	r3, #48	; 0x30
 800277c:	d819      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800277e:	2b20      	cmp	r3, #32
 8002780:	d00c      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002782:	2b20      	cmp	r3, #32
 8002784:	d815      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d019      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800278a:	2b10      	cmp	r3, #16
 800278c:	d111      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278e:	4baa      	ldr	r3, [pc, #680]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	4aa9      	ldr	r2, [pc, #676]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800279c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027a0:	3308      	adds	r3, #8
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 faa9 	bl	8003cfc <RCCEx_PLL2_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80027b0:	e006      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80027be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027c8:	4b9b      	ldr	r3, [pc, #620]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80027d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027d8:	430b      	orrs	r3, r1
 80027da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002800:	460b      	mov	r3, r1
 8002802:	4313      	orrs	r3, r2
 8002804:	d051      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002810:	d035      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8002812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002816:	d82e      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002818:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800281c:	d031      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800281e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002822:	d828      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d01a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	d822      	bhi.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002838:	d007      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800283a:	e01c      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4a7d      	ldr	r2, [pc, #500]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002848:	e01c      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800284a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800284e:	3308      	adds	r3, #8
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f001 fa52 	bl	8003cfc <RCCEx_PLL2_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800285e:	e011      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002864:	3328      	adds	r3, #40	; 0x28
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f001 faf9 	bl	8003e60 <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002874:	e006      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800287c:	e002      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002884:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	4a67      	ldr	r2, [pc, #412]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800289c:	430b      	orrs	r3, r1
 800289e:	6513      	str	r3, [r2, #80]	; 0x50
 80028a0:	e003      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80028b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4313      	orrs	r3, r2
 80028c8:	d053      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d4:	d033      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80028d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028da:	d82c      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028e0:	d02f      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80028e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028e6:	d826      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028ec:	d02b      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80028ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028f2:	d820      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80028f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f8:	d012      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80028fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fe:	d81a      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d022      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002908:	d115      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800290a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800290e:	3308      	adds	r3, #8
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f001 f9f2 	bl	8003cfc <RCCEx_PLL2_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800291e:	e015      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002924:	3328      	adds	r3, #40	; 0x28
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f001 fa99 	bl	8003e60 <RCCEx_PLL3_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002934:	e00a      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800293c:	e006      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800293e:	bf00      	nop
 8002940:	e004      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800294a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002954:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800295c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002964:	430b      	orrs	r3, r1
 8002966:	6513      	str	r3, [r2, #80]	; 0x50
 8002968:	e003      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800296e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800297e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002988:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800298c:	460b      	mov	r3, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	d058      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002996:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800299a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299e:	d033      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80029a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029a4:	d82c      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d02f      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d826      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80029b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029b6:	d02b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80029b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029bc:	d820      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80029be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c2:	d012      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80029c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c8:	d81a      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d022      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d2:	d115      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029d8:	3308      	adds	r3, #8
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 f98d 	bl	8003cfc <RCCEx_PLL2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029e8:	e015      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029ee:	3328      	adds	r3, #40	; 0x28
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 fa34 	bl	8003e60 <RCCEx_PLL3_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80029fe:	e00a      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a06:	e006      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a08:	bf00      	nop
 8002a0a:	e004      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a0c:	bf00      	nop
 8002a0e:	e002      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a10:	bf00      	nop
 8002a12:	e000      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10e      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a2e:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	e006      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002a36:	bf00      	nop
 8002a38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4313      	orrs	r3, r2
 8002a62:	d037      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6e:	d00e      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a74:	d816      	bhi.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d018      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002a7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a80:	4bc4      	ldr	r3, [pc, #784]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	4ac3      	ldr	r2, [pc, #780]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a8c:	e00f      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a92:	3308      	adds	r3, #8
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f930 	bl	8003cfc <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002aa2:	e004      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002aaa:	e000      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ab6:	4bb7      	ldr	r3, [pc, #732]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac4:	4ab3      	ldr	r2, [pc, #716]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ac6:	430b      	orrs	r3, r1
 8002ac8:	6513      	str	r3, [r2, #80]	; 0x50
 8002aca:	e003      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ad0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002aea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002aee:	460b      	mov	r3, r1
 8002af0:	4313      	orrs	r3, r2
 8002af2:	d039      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d81c      	bhi.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002afe:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b04:	08002b41 	.word	0x08002b41
 8002b08:	08002b15 	.word	0x08002b15
 8002b0c:	08002b23 	.word	0x08002b23
 8002b10:	08002b41 	.word	0x08002b41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4b9f      	ldr	r3, [pc, #636]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	4a9e      	ldr	r2, [pc, #632]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b20:	e00f      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b26:	3308      	adds	r3, #8
 8002b28:	2102      	movs	r1, #2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f8e6 	bl	8003cfc <RCCEx_PLL2_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b36:	e004      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b3e:	e000      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b4a:	4b92      	ldr	r3, [pc, #584]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f023 0103 	bic.w	r1, r3, #3
 8002b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	4a8e      	ldr	r2, [pc, #568]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	e003      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f000 8099 	beq.w	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8a:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a82      	ldr	r2, [pc, #520]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b96:	f7fe f96b 	bl	8000e70 <HAL_GetTick>
 8002b9a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba0:	f7fe f966 	bl	8000e70 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	; 0x64
 8002bae:	d903      	bls.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002bb6:	e005      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb8:	4b77      	ldr	r3, [pc, #476]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ed      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d173      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bd8:	4053      	eors	r3, r2
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bee:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a68      	ldr	r2, [pc, #416]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c06:	4a63      	ldr	r2, [pc, #396]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1a:	d118      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f928 	bl	8000e70 <HAL_GetTick>
 8002c20:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c24:	e00d      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe f923 	bl	8000e70 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c30:	1ad2      	subs	r2, r2, r3
 8002c32:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d903      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8002c40:	e005      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0eb      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d129      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c66:	d10e      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c78:	091a      	lsrs	r2, r3, #4
 8002c7a:	4b48      	ldr	r3, [pc, #288]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	4a45      	ldr	r2, [pc, #276]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6113      	str	r3, [r2, #16]
 8002c84:	e005      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002c86:	4b43      	ldr	r3, [pc, #268]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	4a42      	ldr	r2, [pc, #264]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c90:	6113      	str	r3, [r2, #16]
 8002c92:	4b40      	ldr	r3, [pc, #256]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002caa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002cb2:	e003      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f002 0301 	and.w	r3, r2, #1
 8002cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002cd2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f000 808f 	beq.w	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce4:	2b28      	cmp	r3, #40	; 0x28
 8002ce6:	d871      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002dd5 	.word	0x08002dd5
 8002cf4:	08002dcd 	.word	0x08002dcd
 8002cf8:	08002dcd 	.word	0x08002dcd
 8002cfc:	08002dcd 	.word	0x08002dcd
 8002d00:	08002dcd 	.word	0x08002dcd
 8002d04:	08002dcd 	.word	0x08002dcd
 8002d08:	08002dcd 	.word	0x08002dcd
 8002d0c:	08002dcd 	.word	0x08002dcd
 8002d10:	08002da1 	.word	0x08002da1
 8002d14:	08002dcd 	.word	0x08002dcd
 8002d18:	08002dcd 	.word	0x08002dcd
 8002d1c:	08002dcd 	.word	0x08002dcd
 8002d20:	08002dcd 	.word	0x08002dcd
 8002d24:	08002dcd 	.word	0x08002dcd
 8002d28:	08002dcd 	.word	0x08002dcd
 8002d2c:	08002dcd 	.word	0x08002dcd
 8002d30:	08002db7 	.word	0x08002db7
 8002d34:	08002dcd 	.word	0x08002dcd
 8002d38:	08002dcd 	.word	0x08002dcd
 8002d3c:	08002dcd 	.word	0x08002dcd
 8002d40:	08002dcd 	.word	0x08002dcd
 8002d44:	08002dcd 	.word	0x08002dcd
 8002d48:	08002dcd 	.word	0x08002dcd
 8002d4c:	08002dcd 	.word	0x08002dcd
 8002d50:	08002dd5 	.word	0x08002dd5
 8002d54:	08002dcd 	.word	0x08002dcd
 8002d58:	08002dcd 	.word	0x08002dcd
 8002d5c:	08002dcd 	.word	0x08002dcd
 8002d60:	08002dcd 	.word	0x08002dcd
 8002d64:	08002dcd 	.word	0x08002dcd
 8002d68:	08002dcd 	.word	0x08002dcd
 8002d6c:	08002dcd 	.word	0x08002dcd
 8002d70:	08002dd5 	.word	0x08002dd5
 8002d74:	08002dcd 	.word	0x08002dcd
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002dcd 	.word	0x08002dcd
 8002d80:	08002dcd 	.word	0x08002dcd
 8002d84:	08002dcd 	.word	0x08002dcd
 8002d88:	08002dcd 	.word	0x08002dcd
 8002d8c:	08002dcd 	.word	0x08002dcd
 8002d90:	08002dd5 	.word	0x08002dd5
 8002d94:	58024400 	.word	0x58024400
 8002d98:	58024800 	.word	0x58024800
 8002d9c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002da4:	3308      	adds	r3, #8
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 ffa7 	bl	8003cfc <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dba:	3328      	adds	r3, #40	; 0x28
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 f84e 	bl	8003e60 <RCCEx_PLL3_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002dca:	e004      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002dde:	4bbf      	ldr	r3, [pc, #764]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dec:	4abb      	ldr	r2, [pc, #748]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6553      	str	r3, [r2, #84]	; 0x54
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002df8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f002 0302 	and.w	r3, r2, #2
 8002e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	d041      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d824      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e79 	.word	0x08002e79
 8002e30:	08002e45 	.word	0x08002e45
 8002e34:	08002e5b 	.word	0x08002e5b
 8002e38:	08002e79 	.word	0x08002e79
 8002e3c:	08002e79 	.word	0x08002e79
 8002e40:	08002e79 	.word	0x08002e79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e48:	3308      	adds	r3, #8
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 ff55 	bl	8003cfc <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e58:	e00f      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e5e:	3328      	adds	r3, #40	; 0x28
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fffc 	bl	8003e60 <RCCEx_PLL3_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e82:	4b96      	ldr	r3, [pc, #600]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f023 0107 	bic.w	r1, r3, #7
 8002e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	4a92      	ldr	r2, [pc, #584]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6553      	str	r3, [r2, #84]	; 0x54
 8002e96:	e003      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea8:	f002 0304 	and.w	r3, r2, #4
 8002eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	d044      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d825      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002eed 	.word	0x08002eed
 8002edc:	08002f03 	.word	0x08002f03
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ff01 	bl	8003cfc <RCCEx_PLL2_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f00:	e00f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f06:	3328      	adds	r3, #40	; 0x28
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ffa8 	bl	8003e60 <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f16:	e004      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f1e:	e000      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8002f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10b      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f2a:	4b6c      	ldr	r3, [pc, #432]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	f023 0107 	bic.w	r1, r3, #7
 8002f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	4a68      	ldr	r2, [pc, #416]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f40:	e003      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f52:	f002 0320 	and.w	r3, r2, #32
 8002f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4313      	orrs	r3, r2
 8002f68:	d055      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f76:	d033      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d82c      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f82:	d02f      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f88:	d826      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f8e:	d02b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f94:	d820      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9a:	d012      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fa0:	d81a      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d022      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fea1 	bl	8003cfc <RCCEx_PLL2_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e015      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fc6:	3328      	adds	r3, #40	; 0x28
 8002fc8:	2102      	movs	r1, #2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 ff48 	bl	8003e60 <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e00a      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002fde:	e006      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fe0:	bf00      	nop
 8002fe2:	e004      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fe4:	bf00      	nop
 8002fe6:	e002      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e000      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003006:	4a35      	ldr	r2, [pc, #212]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003008:	430b      	orrs	r3, r1
 800300a:	6553      	str	r3, [r2, #84]	; 0x54
 800300c:	e003      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800300e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003012:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003026:	2300      	movs	r3, #0
 8003028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800302c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003030:	460b      	mov	r3, r1
 8003032:	4313      	orrs	r3, r2
 8003034:	d058      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800303a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800303e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003042:	d033      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003044:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003048:	d82c      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d02f      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003054:	d826      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800305a:	d02b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800305c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003060:	d820      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003066:	d012      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306c:	d81a      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d022      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d115      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800307c:	3308      	adds	r3, #8
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fe3b 	bl	8003cfc <RCCEx_PLL2_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800308c:	e015      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800308e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003092:	3328      	adds	r3, #40	; 0x28
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fee2 	bl	8003e60 <RCCEx_PLL3_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030a2:	e00a      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030aa:	e006      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80030ac:	bf00      	nop
 80030ae:	e004      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80030b0:	bf00      	nop
 80030b2:	e002      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80030b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10e      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80030ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d2:	4a02      	ldr	r2, [pc, #8]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6593      	str	r3, [r2, #88]	; 0x58
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80030f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d055      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800310c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003110:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003114:	d033      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003116:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800311a:	d82c      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	d02f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003126:	d826      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003128:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800312c:	d02b      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800312e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003132:	d820      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003134:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003138:	d012      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800313a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313e:	d81a      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d022      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003148:	d115      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800314a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800314e:	3308      	adds	r3, #8
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fdd2 	bl	8003cfc <RCCEx_PLL2_Config>
 8003158:	4603      	mov	r3, r0
 800315a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800315e:	e015      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003164:	3328      	adds	r3, #40	; 0x28
 8003166:	2102      	movs	r1, #2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe79 	bl	8003e60 <RCCEx_PLL3_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003174:	e00a      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800317c:	e006      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800317e:	bf00      	nop
 8003180:	e004      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800318a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003194:	4ba0      	ldr	r3, [pc, #640]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a4:	4a9c      	ldr	r2, [pc, #624]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031a6:	430b      	orrs	r3, r1
 80031a8:	6593      	str	r3, [r2, #88]	; 0x58
 80031aa:	e003      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80031b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f002 0308 	and.w	r3, r2, #8
 80031c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80031ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80031ce:	460b      	mov	r3, r1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	d01e      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80031d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e6:	3328      	adds	r3, #40	; 0x28
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fe38 	bl	8003e60 <RCCEx_PLL3_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80031fc:	4b86      	ldr	r3, [pc, #536]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320c:	4a82      	ldr	r2, [pc, #520]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800320e:	430b      	orrs	r3, r1
 8003210:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f002 0310 	and.w	r3, r2, #16
 800321e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003228:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d01e      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800323e:	d10c      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003244:	3328      	adds	r3, #40	; 0x28
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fe09 	bl	8003e60 <RCCEx_PLL3_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800325a:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800326c:	430b      	orrs	r3, r1
 800326e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800327c:	67bb      	str	r3, [r7, #120]	; 0x78
 800327e:	2300      	movs	r3, #0
 8003280:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003282:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003286:	460b      	mov	r3, r1
 8003288:	4313      	orrs	r3, r2
 800328a:	d03e      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800328c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003298:	d022      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800329a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800329e:	d81b      	bhi.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80032aa:	e015      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032b0:	3308      	adds	r3, #8
 80032b2:	2100      	movs	r1, #0
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fd21 	bl	8003cfc <RCCEx_PLL2_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032c0:	e00f      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032c6:	3328      	adds	r3, #40	; 0x28
 80032c8:	2102      	movs	r1, #2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fdc8 	bl	8003e60 <RCCEx_PLL3_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032d6:	e004      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80032de:	e000      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80032e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032fa:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003302:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003306:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800330a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003316:	673b      	str	r3, [r7, #112]	; 0x70
 8003318:	2300      	movs	r3, #0
 800331a:	677b      	str	r3, [r7, #116]	; 0x74
 800331c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003320:	460b      	mov	r3, r1
 8003322:	4313      	orrs	r3, r2
 8003324:	d03b      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800332a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003332:	d01f      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003338:	d818      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003344:	d007      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003346:	e011      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003348:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4a32      	ldr	r2, [pc, #200]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800334e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003354:	e00f      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800335a:	3328      	adds	r3, #40	; 0x28
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fd7e 	bl	8003e60 <RCCEx_PLL3_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800336a:	e004      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003390:	430b      	orrs	r3, r1
 8003392:	6553      	str	r3, [r2, #84]	; 0x54
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800339a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80033aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ac:	2300      	movs	r3, #0
 80033ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	d034      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80033ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d007      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80033ca:	e011      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033d8:	e00e      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033de:	3308      	adds	r3, #8
 80033e0:	2102      	movs	r1, #2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fc8a 	bl	8003cfc <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033ee:	e003      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10d      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003410:	430b      	orrs	r3, r1
 8003412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003414:	e006      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003420:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
 8003432:	2300      	movs	r3, #0
 8003434:	667b      	str	r3, [r7, #100]	; 0x64
 8003436:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d00c      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003444:	3328      	adds	r3, #40	; 0x28
 8003446:	2102      	movs	r1, #2
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fd09 	bl	8003e60 <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800345a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003466:	65bb      	str	r3, [r7, #88]	; 0x58
 8003468:	2300      	movs	r3, #0
 800346a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800346c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d036      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800347a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003480:	d018      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003486:	d811      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800348c:	d014      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d80b      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349c:	d106      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349e:	4bb7      	ldr	r3, [pc, #732]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	4ab6      	ldr	r2, [pc, #728]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80034b2:	e004      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80034b4:	bf00      	nop
 80034b6:	e002      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80034b8:	bf00      	nop
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80034bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c6:	4bad      	ldr	r3, [pc, #692]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d4:	4aa9      	ldr	r2, [pc, #676]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6553      	str	r3, [r2, #84]	; 0x54
 80034da:	e003      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80034f0:	653b      	str	r3, [r7, #80]	; 0x50
 80034f2:	2300      	movs	r3, #0
 80034f4:	657b      	str	r3, [r7, #84]	; 0x54
 80034f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80034fa:	460b      	mov	r3, r1
 80034fc:	4313      	orrs	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003500:	4b9e      	ldr	r3, [pc, #632]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a9b      	ldr	r2, [pc, #620]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003510:	430b      	orrs	r3, r1
 8003512:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
 8003522:	2300      	movs	r3, #0
 8003524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003526:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003530:	4b92      	ldr	r3, [pc, #584]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353e:	4a8f      	ldr	r2, [pc, #572]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003550:	643b      	str	r3, [r7, #64]	; 0x40
 8003552:	2300      	movs	r3, #0
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
 8003556:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800355a:	460b      	mov	r3, r1
 800355c:	4313      	orrs	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003560:	4b86      	ldr	r3, [pc, #536]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	4a85      	ldr	r2, [pc, #532]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800356a:	6113      	str	r3, [r2, #16]
 800356c:	4b83      	ldr	r3, [pc, #524]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800356e:	6919      	ldr	r1, [r3, #16]
 8003570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003574:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003578:	4a80      	ldr	r2, [pc, #512]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800357a:	430b      	orrs	r3, r1
 800357c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800357e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
 800358c:	2300      	movs	r3, #0
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003594:	460b      	mov	r3, r1
 8003596:	4313      	orrs	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800359a:	4b78      	ldr	r3, [pc, #480]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800359e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80035a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	4a74      	ldr	r2, [pc, #464]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80035ba:	633b      	str	r3, [r7, #48]	; 0x30
 80035bc:	2300      	movs	r3, #0
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
 80035c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80035c4:	460b      	mov	r3, r1
 80035c6:	4313      	orrs	r3, r2
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ca:	4b6c      	ldr	r3, [pc, #432]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	4a68      	ldr	r2, [pc, #416]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	2100      	movs	r1, #0
 80035ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d011      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003600:	3308      	adds	r3, #8
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fb79 	bl	8003cfc <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003610:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800361c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	2100      	movs	r1, #0
 800362a:	6239      	str	r1, [r7, #32]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d011      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800363c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003640:	3308      	adds	r3, #8
 8003642:	2101      	movs	r1, #1
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fb59 	bl	8003cfc <RCCEx_PLL2_Config>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003658:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800365c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	2100      	movs	r1, #0
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003676:	460b      	mov	r3, r1
 8003678:	4313      	orrs	r3, r2
 800367a:	d011      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800367c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003680:	3308      	adds	r3, #8
 8003682:	2102      	movs	r1, #2
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fb39 	bl	8003cfc <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800369c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80036a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	2100      	movs	r1, #0
 80036aa:	6139      	str	r1, [r7, #16]
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80036b6:	460b      	mov	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	d011      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c0:	3328      	adds	r3, #40	; 0x28
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fbcb 	bl	8003e60 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80036d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80036e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	2100      	movs	r1, #0
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80036f6:	460b      	mov	r3, r1
 80036f8:	4313      	orrs	r3, r2
 80036fa:	d011      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003700:	3328      	adds	r3, #40	; 0x28
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fbab 	bl	8003e60 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800371c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	2100      	movs	r1, #0
 800372a:	6039      	str	r1, [r7, #0]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d011      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003740:	3328      	adds	r3, #40	; 0x28
 8003742:	2102      	movs	r1, #2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 fb8b 	bl	8003e60 <RCCEx_PLL3_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800375c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003760:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
}
 800376e:	4618      	mov	r0, r3
 8003770:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400

08003780 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003784:	f7fe fe00 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	58024400 	.word	0x58024400
 80037a8:	08008148 	.word	0x08008148

080037ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b089      	sub	sp, #36	; 0x24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80037b4:	4ba1      	ldr	r3, [pc, #644]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80037be:	4b9f      	ldr	r3, [pc, #636]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	0b1b      	lsrs	r3, r3, #12
 80037c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80037ca:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80037d6:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037da:	08db      	lsrs	r3, r3, #3
 80037dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8111 	beq.w	8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	f000 8083 	beq.w	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b02      	cmp	r3, #2
 8003806:	f200 80a1 	bhi.w	800394c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d056      	beq.n	80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003816:	e099      	b.n	800394c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003818:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02d      	beq.n	8003880 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003824:	4b85      	ldr	r3, [pc, #532]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	4a84      	ldr	r2, [pc, #528]	; (8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800384e:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800385e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003862:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800386e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800387e:	e087      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800388e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038c2:	e065      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d6:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003906:	e043      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391a:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392a:	ed97 6a03 	vldr	s12, [r7, #12]
 800392e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800394a:	e021      	b.n	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800395a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395e:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003972:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800398e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003990:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	0a5b      	lsrs	r3, r3, #9
 8003996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039b6:	ee17 2a90 	vmov	r2, s15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039e4:	ee17 2a90 	vmov	r2, s15
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039f6:	ee07 3a90 	vmov	s15, r3
 80039fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a12:	ee17 2a90 	vmov	r2, s15
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a1a:	e008      	b.n	8003a2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
}
 8003a2e:	bf00      	nop
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	03d09000 	.word	0x03d09000
 8003a44:	46000000 	.word	0x46000000
 8003a48:	4c742400 	.word	0x4c742400
 8003a4c:	4a742400 	.word	0x4a742400
 8003a50:	4bbebc20 	.word	0x4bbebc20

08003a54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a5c:	4ba1      	ldr	r3, [pc, #644]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003a66:	4b9f      	ldr	r3, [pc, #636]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	0d1b      	lsrs	r3, r3, #20
 8003a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a72:	4b9c      	ldr	r3, [pc, #624]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a7e:	4b99      	ldr	r3, [pc, #612]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8111 	beq.w	8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f000 8083 	beq.w	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	f200 80a1 	bhi.w	8003bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d056      	beq.n	8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003abe:	e099      	b.n	8003bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d02d      	beq.n	8003b28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003acc:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	4a84      	ldr	r2, [pc, #528]	; (8003ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	ee07 3a90 	vmov	s15, r3
 8003ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b7b      	ldr	r3, [pc, #492]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b26:	e087      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003cf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6a:	e065      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bae:	e043      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b48      	ldr	r3, [pc, #288]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf2:	e021      	b.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	0a5b      	lsrs	r3, r3, #9
 8003c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5e:	ee17 2a90 	vmov	r2, s15
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003c66:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	0c1b      	lsrs	r3, r3, #16
 8003c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c8c:	ee17 2a90 	vmov	r2, s15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	0e1b      	lsrs	r3, r3, #24
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cba:	ee17 2a90 	vmov	r2, s15
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
}
 8003cd6:	bf00      	nop
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	03d09000 	.word	0x03d09000
 8003cec:	46000000 	.word	0x46000000
 8003cf0:	4c742400 	.word	0x4c742400
 8003cf4:	4a742400 	.word	0x4a742400
 8003cf8:	4bbebc20 	.word	0x4bbebc20

08003cfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d101      	bne.n	8003d1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e099      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d26:	f7fd f8a3 	bl	8000e70 <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d2e:	f7fd f89f 	bl	8000e70 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e086      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	031b      	lsls	r3, r3, #12
 8003d5a:	493f      	ldr	r1, [pc, #252]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	025b      	lsls	r3, r3, #9
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	061b      	lsls	r3, r3, #24
 8003d8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d90:	4931      	ldr	r1, [pc, #196]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	492d      	ldr	r1, [pc, #180]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003da8:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	f023 0220 	bic.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4928      	ldr	r1, [pc, #160]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dc0:	f023 0310 	bic.w	r3, r3, #16
 8003dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dca:	4b24      	ldr	r3, [pc, #144]	; (8003e5c <RCCEx_PLL2_Config+0x160>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	69d2      	ldr	r2, [r2, #28]
 8003dd2:	00d2      	lsls	r2, r2, #3
 8003dd4:	4920      	ldr	r1, [pc, #128]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003df6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003df8:	e00f      	b.n	8003e1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e0c:	e005      	b.n	8003e1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e26:	f7fd f823 	bl	8000e70 <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e2c:	e008      	b.n	8003e40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e2e:	f7fd f81f 	bl	8000e70 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <RCCEx_PLL2_Config+0x15c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	ffff0007 	.word	0xffff0007

08003e60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e6e:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d101      	bne.n	8003e7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e099      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e7e:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e8a:	f7fc fff1 	bl	8000e70 <HAL_GetTick>
 8003e8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e92:	f7fc ffed 	bl	8000e70 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e086      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003eb0:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	051b      	lsls	r3, r3, #20
 8003ebe:	493f      	ldr	r1, [pc, #252]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	025b      	lsls	r3, r3, #9
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ef4:	4931      	ldr	r1, [pc, #196]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	492d      	ldr	r1, [pc, #180]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	4928      	ldr	r1, [pc, #160]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	4a26      	ldr	r2, [pc, #152]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <RCCEx_PLL3_Config+0x160>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	69d2      	ldr	r2, [r2, #28]
 8003f36:	00d2      	lsls	r2, r2, #3
 8003f38:	4920      	ldr	r1, [pc, #128]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4a19      	ldr	r2, [pc, #100]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f5c:	e00f      	b.n	8003f7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003f64:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f70:	e005      	b.n	8003f7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8a:	f7fc ff71 	bl	8000e70 <HAL_GetTick>
 8003f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f90:	e008      	b.n	8003fa4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f92:	f7fc ff6d 	bl	8000e70 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e006      	b.n	8003fb2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <RCCEx_PLL3_Config+0x15c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
 8003fc0:	ffff0007 	.word	0xffff0007

08003fc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fc fd8b 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8ba 	bl	8004180 <UART_SetConfig>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ff1a 	bl	8004e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 ffa1 	bl	8004f9c <UART_CheckIdleState>
 800405a:	4603      	mov	r3, r0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	2b20      	cmp	r3, #32
 800407c:	d17b      	bne.n	8004176 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_Transmit+0x26>
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e074      	b.n	8004178 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409e:	f7fc fee7 	bl	8000e70 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d108      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e003      	b.n	80040d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d8:	e030      	b.n	800413c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f001 f803 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e03d      	b.n	8004178 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3302      	adds	r3, #2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e007      	b.n	800412a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1c8      	bne.n	80040da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 ffcc 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e006      	b.n	8004178 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b092      	sub	sp, #72	; 0x48
 8004186:	af00      	add	r7, sp, #0
 8004188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4bbe      	ldr	r3, [pc, #760]	; (80044a8 <UART_SetConfig+0x328>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4ab3      	ldr	r2, [pc, #716]	; (80044ac <UART_SetConfig+0x32c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e8:	4313      	orrs	r3, r2
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4baf      	ldr	r3, [pc, #700]	; (80044b0 <UART_SetConfig+0x330>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f023 010f 	bic.w	r1, r3, #15
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4aa6      	ldr	r2, [pc, #664]	; (80044b4 <UART_SetConfig+0x334>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d177      	bne.n	8004310 <UART_SetConfig+0x190>
 8004220:	4ba5      	ldr	r3, [pc, #660]	; (80044b8 <UART_SetConfig+0x338>)
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004228:	2b28      	cmp	r3, #40	; 0x28
 800422a:	d86d      	bhi.n	8004308 <UART_SetConfig+0x188>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0xb4>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	080042d9 	.word	0x080042d9
 8004238:	08004309 	.word	0x08004309
 800423c:	08004309 	.word	0x08004309
 8004240:	08004309 	.word	0x08004309
 8004244:	08004309 	.word	0x08004309
 8004248:	08004309 	.word	0x08004309
 800424c:	08004309 	.word	0x08004309
 8004250:	08004309 	.word	0x08004309
 8004254:	080042e1 	.word	0x080042e1
 8004258:	08004309 	.word	0x08004309
 800425c:	08004309 	.word	0x08004309
 8004260:	08004309 	.word	0x08004309
 8004264:	08004309 	.word	0x08004309
 8004268:	08004309 	.word	0x08004309
 800426c:	08004309 	.word	0x08004309
 8004270:	08004309 	.word	0x08004309
 8004274:	080042e9 	.word	0x080042e9
 8004278:	08004309 	.word	0x08004309
 800427c:	08004309 	.word	0x08004309
 8004280:	08004309 	.word	0x08004309
 8004284:	08004309 	.word	0x08004309
 8004288:	08004309 	.word	0x08004309
 800428c:	08004309 	.word	0x08004309
 8004290:	08004309 	.word	0x08004309
 8004294:	080042f1 	.word	0x080042f1
 8004298:	08004309 	.word	0x08004309
 800429c:	08004309 	.word	0x08004309
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004309 	.word	0x08004309
 80042a8:	08004309 	.word	0x08004309
 80042ac:	08004309 	.word	0x08004309
 80042b0:	08004309 	.word	0x08004309
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004309 	.word	0x08004309
 80042c0:	08004309 	.word	0x08004309
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004309 	.word	0x08004309
 80042cc:	08004309 	.word	0x08004309
 80042d0:	08004309 	.word	0x08004309
 80042d4:	08004301 	.word	0x08004301
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042de:	e326      	b.n	800492e <UART_SetConfig+0x7ae>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e6:	e322      	b.n	800492e <UART_SetConfig+0x7ae>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ee:	e31e      	b.n	800492e <UART_SetConfig+0x7ae>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f6:	e31a      	b.n	800492e <UART_SetConfig+0x7ae>
 80042f8:	2320      	movs	r3, #32
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e316      	b.n	800492e <UART_SetConfig+0x7ae>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e312      	b.n	800492e <UART_SetConfig+0x7ae>
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e30e      	b.n	800492e <UART_SetConfig+0x7ae>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a69      	ldr	r2, [pc, #420]	; (80044bc <UART_SetConfig+0x33c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d130      	bne.n	800437c <UART_SetConfig+0x1fc>
 800431a:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <UART_SetConfig+0x338>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	2b05      	cmp	r3, #5
 8004324:	d826      	bhi.n	8004374 <UART_SetConfig+0x1f4>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x1ac>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004345 	.word	0x08004345
 8004330:	0800434d 	.word	0x0800434d
 8004334:	08004355 	.word	0x08004355
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e2f0      	b.n	800492e <UART_SetConfig+0x7ae>
 800434c:	2304      	movs	r3, #4
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004352:	e2ec      	b.n	800492e <UART_SetConfig+0x7ae>
 8004354:	2308      	movs	r3, #8
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435a:	e2e8      	b.n	800492e <UART_SetConfig+0x7ae>
 800435c:	2310      	movs	r3, #16
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004362:	e2e4      	b.n	800492e <UART_SetConfig+0x7ae>
 8004364:	2320      	movs	r3, #32
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436a:	e2e0      	b.n	800492e <UART_SetConfig+0x7ae>
 800436c:	2340      	movs	r3, #64	; 0x40
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004372:	e2dc      	b.n	800492e <UART_SetConfig+0x7ae>
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437a:	e2d8      	b.n	800492e <UART_SetConfig+0x7ae>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4f      	ldr	r2, [pc, #316]	; (80044c0 <UART_SetConfig+0x340>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d130      	bne.n	80043e8 <UART_SetConfig+0x268>
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <UART_SetConfig+0x338>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b05      	cmp	r3, #5
 8004390:	d826      	bhi.n	80043e0 <UART_SetConfig+0x260>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x218>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043b1 	.word	0x080043b1
 800439c:	080043b9 	.word	0x080043b9
 80043a0:	080043c1 	.word	0x080043c1
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043d9 	.word	0x080043d9
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e2ba      	b.n	800492e <UART_SetConfig+0x7ae>
 80043b8:	2304      	movs	r3, #4
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043be:	e2b6      	b.n	800492e <UART_SetConfig+0x7ae>
 80043c0:	2308      	movs	r3, #8
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c6:	e2b2      	b.n	800492e <UART_SetConfig+0x7ae>
 80043c8:	2310      	movs	r3, #16
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ce:	e2ae      	b.n	800492e <UART_SetConfig+0x7ae>
 80043d0:	2320      	movs	r3, #32
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d6:	e2aa      	b.n	800492e <UART_SetConfig+0x7ae>
 80043d8:	2340      	movs	r3, #64	; 0x40
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e2a6      	b.n	800492e <UART_SetConfig+0x7ae>
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e6:	e2a2      	b.n	800492e <UART_SetConfig+0x7ae>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <UART_SetConfig+0x344>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d130      	bne.n	8004454 <UART_SetConfig+0x2d4>
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <UART_SetConfig+0x338>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d826      	bhi.n	800444c <UART_SetConfig+0x2cc>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x284>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004425 	.word	0x08004425
 800440c:	0800442d 	.word	0x0800442d
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	2300      	movs	r3, #0
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e284      	b.n	800492e <UART_SetConfig+0x7ae>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e280      	b.n	800492e <UART_SetConfig+0x7ae>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e27c      	b.n	800492e <UART_SetConfig+0x7ae>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e278      	b.n	800492e <UART_SetConfig+0x7ae>
 800443c:	2320      	movs	r3, #32
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e274      	b.n	800492e <UART_SetConfig+0x7ae>
 8004444:	2340      	movs	r3, #64	; 0x40
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e270      	b.n	800492e <UART_SetConfig+0x7ae>
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004452:	e26c      	b.n	800492e <UART_SetConfig+0x7ae>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <UART_SetConfig+0x348>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d142      	bne.n	80044e4 <UART_SetConfig+0x364>
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <UART_SetConfig+0x338>)
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b05      	cmp	r3, #5
 8004468:	d838      	bhi.n	80044dc <UART_SetConfig+0x35c>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x2f0>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004489 	.word	0x08004489
 8004474:	08004491 	.word	0x08004491
 8004478:	08004499 	.word	0x08004499
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044cd 	.word	0x080044cd
 8004484:	080044d5 	.word	0x080044d5
 8004488:	2300      	movs	r3, #0
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e24e      	b.n	800492e <UART_SetConfig+0x7ae>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e24a      	b.n	800492e <UART_SetConfig+0x7ae>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e246      	b.n	800492e <UART_SetConfig+0x7ae>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e242      	b.n	800492e <UART_SetConfig+0x7ae>
 80044a8:	cfff69f3 	.word	0xcfff69f3
 80044ac:	58000c00 	.word	0x58000c00
 80044b0:	11fff4ff 	.word	0x11fff4ff
 80044b4:	40011000 	.word	0x40011000
 80044b8:	58024400 	.word	0x58024400
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	40004c00 	.word	0x40004c00
 80044c8:	40005000 	.word	0x40005000
 80044cc:	2320      	movs	r3, #32
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e22c      	b.n	800492e <UART_SetConfig+0x7ae>
 80044d4:	2340      	movs	r3, #64	; 0x40
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e228      	b.n	800492e <UART_SetConfig+0x7ae>
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e224      	b.n	800492e <UART_SetConfig+0x7ae>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4ab1      	ldr	r2, [pc, #708]	; (80047b0 <UART_SetConfig+0x630>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d176      	bne.n	80045dc <UART_SetConfig+0x45c>
 80044ee:	4bb1      	ldr	r3, [pc, #708]	; (80047b4 <UART_SetConfig+0x634>)
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f6:	2b28      	cmp	r3, #40	; 0x28
 80044f8:	d86c      	bhi.n	80045d4 <UART_SetConfig+0x454>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x380>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	080045a5 	.word	0x080045a5
 8004504:	080045d5 	.word	0x080045d5
 8004508:	080045d5 	.word	0x080045d5
 800450c:	080045d5 	.word	0x080045d5
 8004510:	080045d5 	.word	0x080045d5
 8004514:	080045d5 	.word	0x080045d5
 8004518:	080045d5 	.word	0x080045d5
 800451c:	080045d5 	.word	0x080045d5
 8004520:	080045ad 	.word	0x080045ad
 8004524:	080045d5 	.word	0x080045d5
 8004528:	080045d5 	.word	0x080045d5
 800452c:	080045d5 	.word	0x080045d5
 8004530:	080045d5 	.word	0x080045d5
 8004534:	080045d5 	.word	0x080045d5
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045d5 	.word	0x080045d5
 8004540:	080045b5 	.word	0x080045b5
 8004544:	080045d5 	.word	0x080045d5
 8004548:	080045d5 	.word	0x080045d5
 800454c:	080045d5 	.word	0x080045d5
 8004550:	080045d5 	.word	0x080045d5
 8004554:	080045d5 	.word	0x080045d5
 8004558:	080045d5 	.word	0x080045d5
 800455c:	080045d5 	.word	0x080045d5
 8004560:	080045bd 	.word	0x080045bd
 8004564:	080045d5 	.word	0x080045d5
 8004568:	080045d5 	.word	0x080045d5
 800456c:	080045d5 	.word	0x080045d5
 8004570:	080045d5 	.word	0x080045d5
 8004574:	080045d5 	.word	0x080045d5
 8004578:	080045d5 	.word	0x080045d5
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045c5 	.word	0x080045c5
 8004584:	080045d5 	.word	0x080045d5
 8004588:	080045d5 	.word	0x080045d5
 800458c:	080045d5 	.word	0x080045d5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045d5 	.word	0x080045d5
 8004598:	080045d5 	.word	0x080045d5
 800459c:	080045d5 	.word	0x080045d5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045aa:	e1c0      	b.n	800492e <UART_SetConfig+0x7ae>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b2:	e1bc      	b.n	800492e <UART_SetConfig+0x7ae>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ba:	e1b8      	b.n	800492e <UART_SetConfig+0x7ae>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e1b4      	b.n	800492e <UART_SetConfig+0x7ae>
 80045c4:	2320      	movs	r3, #32
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e1b0      	b.n	800492e <UART_SetConfig+0x7ae>
 80045cc:	2340      	movs	r3, #64	; 0x40
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e1ac      	b.n	800492e <UART_SetConfig+0x7ae>
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e1a8      	b.n	800492e <UART_SetConfig+0x7ae>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a75      	ldr	r2, [pc, #468]	; (80047b8 <UART_SetConfig+0x638>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d130      	bne.n	8004648 <UART_SetConfig+0x4c8>
 80045e6:	4b73      	ldr	r3, [pc, #460]	; (80047b4 <UART_SetConfig+0x634>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d826      	bhi.n	8004640 <UART_SetConfig+0x4c0>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x478>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004611 	.word	0x08004611
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004621 	.word	0x08004621
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e18a      	b.n	800492e <UART_SetConfig+0x7ae>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e186      	b.n	800492e <UART_SetConfig+0x7ae>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e182      	b.n	800492e <UART_SetConfig+0x7ae>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e17e      	b.n	800492e <UART_SetConfig+0x7ae>
 8004630:	2320      	movs	r3, #32
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e17a      	b.n	800492e <UART_SetConfig+0x7ae>
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e176      	b.n	800492e <UART_SetConfig+0x7ae>
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e172      	b.n	800492e <UART_SetConfig+0x7ae>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a5b      	ldr	r2, [pc, #364]	; (80047bc <UART_SetConfig+0x63c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d130      	bne.n	80046b4 <UART_SetConfig+0x534>
 8004652:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <UART_SetConfig+0x634>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b05      	cmp	r3, #5
 800465c:	d826      	bhi.n	80046ac <UART_SetConfig+0x52c>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x4e4>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004685 	.word	0x08004685
 800466c:	0800468d 	.word	0x0800468d
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e154      	b.n	800492e <UART_SetConfig+0x7ae>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e150      	b.n	800492e <UART_SetConfig+0x7ae>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e14c      	b.n	800492e <UART_SetConfig+0x7ae>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e148      	b.n	800492e <UART_SetConfig+0x7ae>
 800469c:	2320      	movs	r3, #32
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e144      	b.n	800492e <UART_SetConfig+0x7ae>
 80046a4:	2340      	movs	r3, #64	; 0x40
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e140      	b.n	800492e <UART_SetConfig+0x7ae>
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e13c      	b.n	800492e <UART_SetConfig+0x7ae>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <UART_SetConfig+0x640>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f040 8082 	bne.w	80047c4 <UART_SetConfig+0x644>
 80046c0:	4b3c      	ldr	r3, [pc, #240]	; (80047b4 <UART_SetConfig+0x634>)
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046c8:	2b28      	cmp	r3, #40	; 0x28
 80046ca:	d86d      	bhi.n	80047a8 <UART_SetConfig+0x628>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0x554>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004779 	.word	0x08004779
 80046d8:	080047a9 	.word	0x080047a9
 80046dc:	080047a9 	.word	0x080047a9
 80046e0:	080047a9 	.word	0x080047a9
 80046e4:	080047a9 	.word	0x080047a9
 80046e8:	080047a9 	.word	0x080047a9
 80046ec:	080047a9 	.word	0x080047a9
 80046f0:	080047a9 	.word	0x080047a9
 80046f4:	08004781 	.word	0x08004781
 80046f8:	080047a9 	.word	0x080047a9
 80046fc:	080047a9 	.word	0x080047a9
 8004700:	080047a9 	.word	0x080047a9
 8004704:	080047a9 	.word	0x080047a9
 8004708:	080047a9 	.word	0x080047a9
 800470c:	080047a9 	.word	0x080047a9
 8004710:	080047a9 	.word	0x080047a9
 8004714:	08004789 	.word	0x08004789
 8004718:	080047a9 	.word	0x080047a9
 800471c:	080047a9 	.word	0x080047a9
 8004720:	080047a9 	.word	0x080047a9
 8004724:	080047a9 	.word	0x080047a9
 8004728:	080047a9 	.word	0x080047a9
 800472c:	080047a9 	.word	0x080047a9
 8004730:	080047a9 	.word	0x080047a9
 8004734:	08004791 	.word	0x08004791
 8004738:	080047a9 	.word	0x080047a9
 800473c:	080047a9 	.word	0x080047a9
 8004740:	080047a9 	.word	0x080047a9
 8004744:	080047a9 	.word	0x080047a9
 8004748:	080047a9 	.word	0x080047a9
 800474c:	080047a9 	.word	0x080047a9
 8004750:	080047a9 	.word	0x080047a9
 8004754:	08004799 	.word	0x08004799
 8004758:	080047a9 	.word	0x080047a9
 800475c:	080047a9 	.word	0x080047a9
 8004760:	080047a9 	.word	0x080047a9
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047a9 	.word	0x080047a9
 800476c:	080047a9 	.word	0x080047a9
 8004770:	080047a9 	.word	0x080047a9
 8004774:	080047a1 	.word	0x080047a1
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477e:	e0d6      	b.n	800492e <UART_SetConfig+0x7ae>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004786:	e0d2      	b.n	800492e <UART_SetConfig+0x7ae>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478e:	e0ce      	b.n	800492e <UART_SetConfig+0x7ae>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004796:	e0ca      	b.n	800492e <UART_SetConfig+0x7ae>
 8004798:	2320      	movs	r3, #32
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e0c6      	b.n	800492e <UART_SetConfig+0x7ae>
 80047a0:	2340      	movs	r3, #64	; 0x40
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a6:	e0c2      	b.n	800492e <UART_SetConfig+0x7ae>
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e0be      	b.n	800492e <UART_SetConfig+0x7ae>
 80047b0:	40011400 	.word	0x40011400
 80047b4:	58024400 	.word	0x58024400
 80047b8:	40007800 	.word	0x40007800
 80047bc:	40007c00 	.word	0x40007c00
 80047c0:	40011800 	.word	0x40011800
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4aad      	ldr	r2, [pc, #692]	; (8004a80 <UART_SetConfig+0x900>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d176      	bne.n	80048bc <UART_SetConfig+0x73c>
 80047ce:	4bad      	ldr	r3, [pc, #692]	; (8004a84 <UART_SetConfig+0x904>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d6:	2b28      	cmp	r3, #40	; 0x28
 80047d8:	d86c      	bhi.n	80048b4 <UART_SetConfig+0x734>
 80047da:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0x660>)
 80047dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e0:	08004885 	.word	0x08004885
 80047e4:	080048b5 	.word	0x080048b5
 80047e8:	080048b5 	.word	0x080048b5
 80047ec:	080048b5 	.word	0x080048b5
 80047f0:	080048b5 	.word	0x080048b5
 80047f4:	080048b5 	.word	0x080048b5
 80047f8:	080048b5 	.word	0x080048b5
 80047fc:	080048b5 	.word	0x080048b5
 8004800:	0800488d 	.word	0x0800488d
 8004804:	080048b5 	.word	0x080048b5
 8004808:	080048b5 	.word	0x080048b5
 800480c:	080048b5 	.word	0x080048b5
 8004810:	080048b5 	.word	0x080048b5
 8004814:	080048b5 	.word	0x080048b5
 8004818:	080048b5 	.word	0x080048b5
 800481c:	080048b5 	.word	0x080048b5
 8004820:	08004895 	.word	0x08004895
 8004824:	080048b5 	.word	0x080048b5
 8004828:	080048b5 	.word	0x080048b5
 800482c:	080048b5 	.word	0x080048b5
 8004830:	080048b5 	.word	0x080048b5
 8004834:	080048b5 	.word	0x080048b5
 8004838:	080048b5 	.word	0x080048b5
 800483c:	080048b5 	.word	0x080048b5
 8004840:	0800489d 	.word	0x0800489d
 8004844:	080048b5 	.word	0x080048b5
 8004848:	080048b5 	.word	0x080048b5
 800484c:	080048b5 	.word	0x080048b5
 8004850:	080048b5 	.word	0x080048b5
 8004854:	080048b5 	.word	0x080048b5
 8004858:	080048b5 	.word	0x080048b5
 800485c:	080048b5 	.word	0x080048b5
 8004860:	080048a5 	.word	0x080048a5
 8004864:	080048b5 	.word	0x080048b5
 8004868:	080048b5 	.word	0x080048b5
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048b5 	.word	0x080048b5
 8004874:	080048b5 	.word	0x080048b5
 8004878:	080048b5 	.word	0x080048b5
 800487c:	080048b5 	.word	0x080048b5
 8004880:	080048ad 	.word	0x080048ad
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e050      	b.n	800492e <UART_SetConfig+0x7ae>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e04c      	b.n	800492e <UART_SetConfig+0x7ae>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e048      	b.n	800492e <UART_SetConfig+0x7ae>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a2:	e044      	b.n	800492e <UART_SetConfig+0x7ae>
 80048a4:	2320      	movs	r3, #32
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048aa:	e040      	b.n	800492e <UART_SetConfig+0x7ae>
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048b2:	e03c      	b.n	800492e <UART_SetConfig+0x7ae>
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ba:	e038      	b.n	800492e <UART_SetConfig+0x7ae>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a71      	ldr	r2, [pc, #452]	; (8004a88 <UART_SetConfig+0x908>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d130      	bne.n	8004928 <UART_SetConfig+0x7a8>
 80048c6:	4b6f      	ldr	r3, [pc, #444]	; (8004a84 <UART_SetConfig+0x904>)
 80048c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	2b05      	cmp	r3, #5
 80048d0:	d826      	bhi.n	8004920 <UART_SetConfig+0x7a0>
 80048d2:	a201      	add	r2, pc, #4	; (adr r2, 80048d8 <UART_SetConfig+0x758>)
 80048d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d8:	080048f1 	.word	0x080048f1
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	08004901 	.word	0x08004901
 80048e4:	08004909 	.word	0x08004909
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004919 	.word	0x08004919
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048f6:	e01a      	b.n	800492e <UART_SetConfig+0x7ae>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048fe:	e016      	b.n	800492e <UART_SetConfig+0x7ae>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004906:	e012      	b.n	800492e <UART_SetConfig+0x7ae>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800490e:	e00e      	b.n	800492e <UART_SetConfig+0x7ae>
 8004910:	2320      	movs	r3, #32
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004916:	e00a      	b.n	800492e <UART_SetConfig+0x7ae>
 8004918:	2340      	movs	r3, #64	; 0x40
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e006      	b.n	800492e <UART_SetConfig+0x7ae>
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004926:	e002      	b.n	800492e <UART_SetConfig+0x7ae>
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a55      	ldr	r2, [pc, #340]	; (8004a88 <UART_SetConfig+0x908>)
 8004934:	4293      	cmp	r3, r2
 8004936:	f040 80f8 	bne.w	8004b2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800493a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800493e:	2b20      	cmp	r3, #32
 8004940:	dc46      	bgt.n	80049d0 <UART_SetConfig+0x850>
 8004942:	2b02      	cmp	r3, #2
 8004944:	db75      	blt.n	8004a32 <UART_SetConfig+0x8b2>
 8004946:	3b02      	subs	r3, #2
 8004948:	2b1e      	cmp	r3, #30
 800494a:	d872      	bhi.n	8004a32 <UART_SetConfig+0x8b2>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <UART_SetConfig+0x7d4>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	080049d7 	.word	0x080049d7
 8004958:	08004a33 	.word	0x08004a33
 800495c:	080049df 	.word	0x080049df
 8004960:	08004a33 	.word	0x08004a33
 8004964:	08004a33 	.word	0x08004a33
 8004968:	08004a33 	.word	0x08004a33
 800496c:	080049ef 	.word	0x080049ef
 8004970:	08004a33 	.word	0x08004a33
 8004974:	08004a33 	.word	0x08004a33
 8004978:	08004a33 	.word	0x08004a33
 800497c:	08004a33 	.word	0x08004a33
 8004980:	08004a33 	.word	0x08004a33
 8004984:	08004a33 	.word	0x08004a33
 8004988:	08004a33 	.word	0x08004a33
 800498c:	080049ff 	.word	0x080049ff
 8004990:	08004a33 	.word	0x08004a33
 8004994:	08004a33 	.word	0x08004a33
 8004998:	08004a33 	.word	0x08004a33
 800499c:	08004a33 	.word	0x08004a33
 80049a0:	08004a33 	.word	0x08004a33
 80049a4:	08004a33 	.word	0x08004a33
 80049a8:	08004a33 	.word	0x08004a33
 80049ac:	08004a33 	.word	0x08004a33
 80049b0:	08004a33 	.word	0x08004a33
 80049b4:	08004a33 	.word	0x08004a33
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a33 	.word	0x08004a33
 80049c0:	08004a33 	.word	0x08004a33
 80049c4:	08004a33 	.word	0x08004a33
 80049c8:	08004a33 	.word	0x08004a33
 80049cc:	08004a25 	.word	0x08004a25
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d02a      	beq.n	8004a2a <UART_SetConfig+0x8aa>
 80049d4:	e02d      	b.n	8004a32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80049d6:	f7fe fed3 	bl	8003780 <HAL_RCCEx_GetD3PCLK1Freq>
 80049da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049dc:	e02f      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fee2 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ec:	e027      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff f82e 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049fc:	e01f      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <UART_SetConfig+0x904>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <UART_SetConfig+0x904>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <UART_SetConfig+0x90c>)
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a1c:	e00f      	b.n	8004a3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <UART_SetConfig+0x90c>)
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a22:	e00c      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a24:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <UART_SetConfig+0x910>)
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a30:	e005      	b.n	8004a3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 81ee 	beq.w	8004e22 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <UART_SetConfig+0x914>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d305      	bcc.n	8004a76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a7c:	e1d1      	b.n	8004e22 <UART_SetConfig+0xca2>
 8004a7e:	bf00      	nop
 8004a80:	40011c00 	.word	0x40011c00
 8004a84:	58024400 	.word	0x58024400
 8004a88:	58000c00 	.word	0x58000c00
 8004a8c:	03d09000 	.word	0x03d09000
 8004a90:	003d0900 	.word	0x003d0900
 8004a94:	08008158 	.word	0x08008158
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	60fa      	str	r2, [r7, #12]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	4ac0      	ldr	r2, [pc, #768]	; (8004da8 <UART_SetConfig+0xc28>)
 8004aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004aba:	f7fb fc31 	bl	8000320 <__aeabi_uldivmod>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	020b      	lsls	r3, r1, #8
 8004ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ad4:	0202      	lsls	r2, r0, #8
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	6849      	ldr	r1, [r1, #4]
 8004ada:	0849      	lsrs	r1, r1, #1
 8004adc:	2000      	movs	r0, #0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	eb12 0804 	adds.w	r8, r2, r4
 8004ae6:	eb43 0905 	adc.w	r9, r3, r5
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	469a      	mov	sl, r3
 8004af2:	4693      	mov	fp, r2
 8004af4:	4652      	mov	r2, sl
 8004af6:	465b      	mov	r3, fp
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fc10 	bl	8000320 <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b0e:	d308      	bcc.n	8004b22 <UART_SetConfig+0x9a2>
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b16:	d204      	bcs.n	8004b22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b1e:	60da      	str	r2, [r3, #12]
 8004b20:	e17f      	b.n	8004e22 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004b28:	e17b      	b.n	8004e22 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	f040 80bd 	bne.w	8004cb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004b36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	dc48      	bgt.n	8004bd0 <UART_SetConfig+0xa50>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db7b      	blt.n	8004c3a <UART_SetConfig+0xaba>
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d879      	bhi.n	8004c3a <UART_SetConfig+0xaba>
 8004b46:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <UART_SetConfig+0x9cc>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004bd7 	.word	0x08004bd7
 8004b50:	08004bdf 	.word	0x08004bdf
 8004b54:	08004c3b 	.word	0x08004c3b
 8004b58:	08004c3b 	.word	0x08004c3b
 8004b5c:	08004be7 	.word	0x08004be7
 8004b60:	08004c3b 	.word	0x08004c3b
 8004b64:	08004c3b 	.word	0x08004c3b
 8004b68:	08004c3b 	.word	0x08004c3b
 8004b6c:	08004bf7 	.word	0x08004bf7
 8004b70:	08004c3b 	.word	0x08004c3b
 8004b74:	08004c3b 	.word	0x08004c3b
 8004b78:	08004c3b 	.word	0x08004c3b
 8004b7c:	08004c3b 	.word	0x08004c3b
 8004b80:	08004c3b 	.word	0x08004c3b
 8004b84:	08004c3b 	.word	0x08004c3b
 8004b88:	08004c3b 	.word	0x08004c3b
 8004b8c:	08004c07 	.word	0x08004c07
 8004b90:	08004c3b 	.word	0x08004c3b
 8004b94:	08004c3b 	.word	0x08004c3b
 8004b98:	08004c3b 	.word	0x08004c3b
 8004b9c:	08004c3b 	.word	0x08004c3b
 8004ba0:	08004c3b 	.word	0x08004c3b
 8004ba4:	08004c3b 	.word	0x08004c3b
 8004ba8:	08004c3b 	.word	0x08004c3b
 8004bac:	08004c3b 	.word	0x08004c3b
 8004bb0:	08004c3b 	.word	0x08004c3b
 8004bb4:	08004c3b 	.word	0x08004c3b
 8004bb8:	08004c3b 	.word	0x08004c3b
 8004bbc:	08004c3b 	.word	0x08004c3b
 8004bc0:	08004c3b 	.word	0x08004c3b
 8004bc4:	08004c3b 	.word	0x08004c3b
 8004bc8:	08004c3b 	.word	0x08004c3b
 8004bcc:	08004c2d 	.word	0x08004c2d
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d02e      	beq.n	8004c32 <UART_SetConfig+0xab2>
 8004bd4:	e031      	b.n	8004c3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd6:	f7fd fc07 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8004bda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004bdc:	e033      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bde:	f7fd fc19 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8004be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004be4:	e02f      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fdde 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf4:	e027      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bf6:	f107 0318 	add.w	r3, r7, #24
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe ff2a 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c04:	e01f      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c06:	4b69      	ldr	r3, [pc, #420]	; (8004dac <UART_SetConfig+0xc2c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c12:	4b66      	ldr	r3, [pc, #408]	; (8004dac <UART_SetConfig+0xc2c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	08db      	lsrs	r3, r3, #3
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <UART_SetConfig+0xc30>)
 8004c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c24:	e00f      	b.n	8004c46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004c26:	4b62      	ldr	r3, [pc, #392]	; (8004db0 <UART_SetConfig+0xc30>)
 8004c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2a:	e00c      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <UART_SetConfig+0xc34>)
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c30:	e009      	b.n	8004c46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c38:	e005      	b.n	8004c46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80ea 	beq.w	8004e22 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	4a55      	ldr	r2, [pc, #340]	; (8004da8 <UART_SetConfig+0xc28>)
 8004c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	441a      	add	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	2b0f      	cmp	r3, #15
 8004c78:	d916      	bls.n	8004ca8 <UART_SetConfig+0xb28>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d212      	bcs.n	8004ca8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ca4:	60da      	str	r2, [r3, #12]
 8004ca6:	e0bc      	b.n	8004e22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cae:	e0b8      	b.n	8004e22 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	dc4b      	bgt.n	8004d50 <UART_SetConfig+0xbd0>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f2c0 8087 	blt.w	8004dcc <UART_SetConfig+0xc4c>
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	f200 8084 	bhi.w	8004dcc <UART_SetConfig+0xc4c>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0xb4c>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004d57 	.word	0x08004d57
 8004cd0:	08004d5f 	.word	0x08004d5f
 8004cd4:	08004dcd 	.word	0x08004dcd
 8004cd8:	08004dcd 	.word	0x08004dcd
 8004cdc:	08004d67 	.word	0x08004d67
 8004ce0:	08004dcd 	.word	0x08004dcd
 8004ce4:	08004dcd 	.word	0x08004dcd
 8004ce8:	08004dcd 	.word	0x08004dcd
 8004cec:	08004d77 	.word	0x08004d77
 8004cf0:	08004dcd 	.word	0x08004dcd
 8004cf4:	08004dcd 	.word	0x08004dcd
 8004cf8:	08004dcd 	.word	0x08004dcd
 8004cfc:	08004dcd 	.word	0x08004dcd
 8004d00:	08004dcd 	.word	0x08004dcd
 8004d04:	08004dcd 	.word	0x08004dcd
 8004d08:	08004dcd 	.word	0x08004dcd
 8004d0c:	08004d87 	.word	0x08004d87
 8004d10:	08004dcd 	.word	0x08004dcd
 8004d14:	08004dcd 	.word	0x08004dcd
 8004d18:	08004dcd 	.word	0x08004dcd
 8004d1c:	08004dcd 	.word	0x08004dcd
 8004d20:	08004dcd 	.word	0x08004dcd
 8004d24:	08004dcd 	.word	0x08004dcd
 8004d28:	08004dcd 	.word	0x08004dcd
 8004d2c:	08004dcd 	.word	0x08004dcd
 8004d30:	08004dcd 	.word	0x08004dcd
 8004d34:	08004dcd 	.word	0x08004dcd
 8004d38:	08004dcd 	.word	0x08004dcd
 8004d3c:	08004dcd 	.word	0x08004dcd
 8004d40:	08004dcd 	.word	0x08004dcd
 8004d44:	08004dcd 	.word	0x08004dcd
 8004d48:	08004dcd 	.word	0x08004dcd
 8004d4c:	08004dbf 	.word	0x08004dbf
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d037      	beq.n	8004dc4 <UART_SetConfig+0xc44>
 8004d54:	e03a      	b.n	8004dcc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7fd fb47 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8004d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d5c:	e03c      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5e:	f7fd fb59 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8004d62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d64:	e038      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fd1e 	bl	80037ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d74:	e030      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d76:	f107 0318 	add.w	r3, r7, #24
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fe fe6a 	bl	8003a54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d84:	e028      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <UART_SetConfig+0xc2c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <UART_SetConfig+0xc2c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	08db      	lsrs	r3, r3, #3
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <UART_SetConfig+0xc30>)
 8004d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004da4:	e018      	b.n	8004dd8 <UART_SetConfig+0xc58>
 8004da6:	bf00      	nop
 8004da8:	08008158 	.word	0x08008158
 8004dac:	58024400 	.word	0x58024400
 8004db0:	03d09000 	.word	0x03d09000
 8004db4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <UART_SetConfig+0xccc>)
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dbc:	e00c      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <UART_SetConfig+0xcd0>)
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc2:	e009      	b.n	8004dd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dca:	e005      	b.n	8004dd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d021      	beq.n	8004e22 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <UART_SetConfig+0xcd4>)
 8004de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dec:	fbb3 f2f2 	udiv	r2, r3, r2
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	085b      	lsrs	r3, r3, #1
 8004df6:	441a      	add	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b0f      	cmp	r3, #15
 8004e06:	d909      	bls.n	8004e1c <UART_SetConfig+0xc9c>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d205      	bcs.n	8004e1c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e002      	b.n	8004e22 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2200      	movs	r2, #0
 8004e36:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e3e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3748      	adds	r7, #72	; 0x48
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4c:	03d09000 	.word	0x03d09000
 8004e50:	003d0900 	.word	0x003d0900
 8004e54:	08008158 	.word	0x08008158

08004e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f56:	d10a      	bne.n	8004f6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	605a      	str	r2, [r3, #4]
  }
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b098      	sub	sp, #96	; 0x60
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fac:	f7fb ff60 	bl	8000e70 <HAL_GetTick>
 8004fb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d12f      	bne.n	8005020 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f88e 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d022      	beq.n	8005020 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fee:	653b      	str	r3, [r7, #80]	; 0x50
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8004ffa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e063      	b.n	80050e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b04      	cmp	r3, #4
 800502c:	d149      	bne.n	80050c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005036:	2200      	movs	r2, #0
 8005038:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f857 	bl	80050f0 <UART_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d03c      	beq.n	80050c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	623b      	str	r3, [r7, #32]
   return(result);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800505c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
 8005068:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e6      	bne.n	8005048 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3308      	adds	r3, #8
 8005080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	60fb      	str	r3, [r7, #12]
   return(result);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	64bb      	str	r3, [r7, #72]	; 0x48
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800509a:	61fa      	str	r2, [r7, #28]
 800509c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	69b9      	ldr	r1, [r7, #24]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	617b      	str	r3, [r7, #20]
   return(result);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e5      	bne.n	800507a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e012      	b.n	80050e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3758      	adds	r7, #88	; 0x58
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005100:	e049      	b.n	8005196 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d045      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fb feb1 	bl	8000e70 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <UART_WaitOnFlagUntilTimeout+0x30>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e048      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d031      	beq.n	8005196 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b08      	cmp	r3, #8
 800513e:	d110      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2208      	movs	r2, #8
 8005146:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f839 	bl	80051c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2208      	movs	r2, #8
 8005152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e029      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005170:	d111      	bne.n	8005196 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f81f 	bl	80051c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00f      	b.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d0a6      	beq.n	8005102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b095      	sub	sp, #84	; 0x54
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e6:	643b      	str	r3, [r7, #64]	; 0x40
 80051e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	61fb      	str	r3, [r7, #28]
   return(result);
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <UART_EndRxTransfer+0xc8>)
 800520e:	4013      	ands	r3, r2
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d118      	bne.n	8005268 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	60bb      	str	r3, [r7, #8]
   return(result);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f023 0310 	bic.w	r3, r3, #16
 800524a:	647b      	str	r3, [r7, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6979      	ldr	r1, [r7, #20]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	613b      	str	r3, [r7, #16]
   return(result);
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e6      	bne.n	8005236 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800527c:	bf00      	nop
 800527e:	3754      	adds	r7, #84	; 0x54
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	effffffe 	.word	0xeffffffe

0800528c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800529e:	2302      	movs	r3, #2
 80052a0:	e027      	b.n	80052f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2224      	movs	r2, #36	; 0x24
 80052ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005312:	2302      	movs	r3, #2
 8005314:	e02d      	b.n	8005372 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2224      	movs	r2, #36	; 0x24
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f850 	bl	80053f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800538e:	2302      	movs	r3, #2
 8005390:	e02d      	b.n	80053ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	; 0x24
 800539e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f812 	bl	80053f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005418:	e031      	b.n	800547e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800541a:	2310      	movs	r3, #16
 800541c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800541e:	2310      	movs	r3, #16
 8005420:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	0e5b      	lsrs	r3, r3, #25
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	0f5b      	lsrs	r3, r3, #29
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005442:	7bbb      	ldrb	r3, [r7, #14]
 8005444:	7b3a      	ldrb	r2, [r7, #12]
 8005446:	4911      	ldr	r1, [pc, #68]	; (800548c <UARTEx_SetNbDataToProcess+0x94>)
 8005448:	5c8a      	ldrb	r2, [r1, r2]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800544e:	7b3a      	ldrb	r2, [r7, #12]
 8005450:	490f      	ldr	r1, [pc, #60]	; (8005490 <UARTEx_SetNbDataToProcess+0x98>)
 8005452:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005454:	fb93 f3f2 	sdiv	r3, r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	7b7a      	ldrb	r2, [r7, #13]
 8005464:	4909      	ldr	r1, [pc, #36]	; (800548c <UARTEx_SetNbDataToProcess+0x94>)
 8005466:	5c8a      	ldrb	r2, [r1, r2]
 8005468:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800546c:	7b7a      	ldrb	r2, [r7, #13]
 800546e:	4908      	ldr	r1, [pc, #32]	; (8005490 <UARTEx_SetNbDataToProcess+0x98>)
 8005470:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005472:	fb93 f3f2 	sdiv	r3, r3, r2
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	08008170 	.word	0x08008170
 8005490:	08008178 	.word	0x08008178

08005494 <__NVIC_SetPriority>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	; (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	; (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054ec:	2100      	movs	r1, #0
 80054ee:	f06f 0004 	mvn.w	r0, #4
 80054f2:	f7ff ffcf 	bl	8005494 <__NVIC_SetPriority>
#endif
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005502:	f3ef 8305 	mrs	r3, IPSR
 8005506:	603b      	str	r3, [r7, #0]
  return(result);
 8005508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800550e:	f06f 0305 	mvn.w	r3, #5
 8005512:	607b      	str	r3, [r7, #4]
 8005514:	e00c      	b.n	8005530 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005516:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <osKernelInitialize+0x44>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d105      	bne.n	800552a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800551e:	4b08      	ldr	r3, [pc, #32]	; (8005540 <osKernelInitialize+0x44>)
 8005520:	2201      	movs	r2, #1
 8005522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005524:	2300      	movs	r3, #0
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e002      	b.n	8005530 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005530:	687b      	ldr	r3, [r7, #4]
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	240000d4 	.word	0x240000d4

08005544 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554a:	f3ef 8305 	mrs	r3, IPSR
 800554e:	603b      	str	r3, [r7, #0]
  return(result);
 8005550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005556:	f06f 0305 	mvn.w	r3, #5
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e010      	b.n	8005580 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800555e:	4b0b      	ldr	r3, [pc, #44]	; (800558c <osKernelStart+0x48>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d109      	bne.n	800557a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005566:	f7ff ffbf 	bl	80054e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <osKernelStart+0x48>)
 800556c:	2202      	movs	r2, #2
 800556e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005570:	f001 f866 	bl	8006640 <vTaskStartScheduler>
      stat = osOK;
 8005574:	2300      	movs	r3, #0
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	e002      	b.n	8005580 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
 800557e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005580:	687b      	ldr	r3, [r7, #4]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	240000d4 	.word	0x240000d4

08005590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af04      	add	r7, sp, #16
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a0:	f3ef 8305 	mrs	r3, IPSR
 80055a4:	617b      	str	r3, [r7, #20]
  return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d17e      	bne.n	80056aa <osThreadNew+0x11a>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d07b      	beq.n	80056aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055b2:	2380      	movs	r3, #128	; 0x80
 80055b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055b6:	2318      	movs	r3, #24
 80055b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055be:	f04f 33ff 	mov.w	r3, #4294967295
 80055c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d045      	beq.n	8005656 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <osThreadNew+0x48>
        name = attr->name;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <osThreadNew+0x6e>
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b38      	cmp	r3, #56	; 0x38
 80055f0:	d805      	bhi.n	80055fe <osThreadNew+0x6e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <osThreadNew+0x72>
        return (NULL);
 80055fe:	2300      	movs	r3, #0
 8005600:	e054      	b.n	80056ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <osThreadNew+0xa8>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b5b      	cmp	r3, #91	; 0x5b
 8005620:	d90a      	bls.n	8005638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <osThreadNew+0xa8>
        mem = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e010      	b.n	800565a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10c      	bne.n	800565a <osThreadNew+0xca>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d108      	bne.n	800565a <osThreadNew+0xca>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <osThreadNew+0xca>
          mem = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e001      	b.n	800565a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d110      	bne.n	8005682 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fe0c 	bl	8006294 <xTaskCreateStatic>
 800567c:	4603      	mov	r3, r0
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	e013      	b.n	80056aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d110      	bne.n	80056aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	b29a      	uxth	r2, r3
 800568c:	f107 0310 	add.w	r3, r7, #16
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 fe57 	bl	800634e <xTaskCreate>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d001      	beq.n	80056aa <osThreadNew+0x11a>
            hTask = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056aa:	693b      	ldr	r3, [r7, #16]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056bc:	f3ef 8305 	mrs	r3, IPSR
 80056c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <osDelay+0x1c>
    stat = osErrorISR;
 80056c8:	f06f 0305 	mvn.w	r3, #5
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e007      	b.n	80056e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 ff7c 	bl	80065d8 <vTaskDelay>
    }
  }

  return (stat);
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a07      	ldr	r2, [pc, #28]	; (8005718 <vApplicationGetIdleTaskMemory+0x2c>)
 80056fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4a06      	ldr	r2, [pc, #24]	; (800571c <vApplicationGetIdleTaskMemory+0x30>)
 8005702:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	240000d8 	.word	0x240000d8
 800571c:	24000134 	.word	0x24000134

08005720 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a07      	ldr	r2, [pc, #28]	; (800574c <vApplicationGetTimerTaskMemory+0x2c>)
 8005730:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vApplicationGetTimerTaskMemory+0x30>)
 8005736:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573e:	601a      	str	r2, [r3, #0]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	24000334 	.word	0x24000334
 8005750:	24000390 	.word	0x24000390

08005754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 0208 	add.w	r2, r3, #8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f103 0208 	add.w	r2, r3, #8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 0208 	add.w	r2, r3, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d103      	bne.n	8005816 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e00c      	b.n	8005830 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3308      	adds	r3, #8
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e002      	b.n	8005824 <vListInsert+0x2e>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d2f6      	bcs.n	800581e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6892      	ldr	r2, [r2, #8]
 800587e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6852      	ldr	r2, [r2, #4]
 8005888:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d103      	bne.n	800589c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	1e5a      	subs	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058e6:	f002 f84d 	bl	8007984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058f6:	fb01 f303 	mul.w	r3, r1, r3
 80058fa:	441a      	add	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	3b01      	subs	r3, #1
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	441a      	add	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d114      	bne.n	8005966 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3310      	adds	r3, #16
 8005948:	4618      	mov	r0, r3
 800594a:	f001 f903 	bl	8006b54 <xTaskRemoveFromEventList>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d012      	beq.n	800597a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <xQueueGenericReset+0xcc>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	e009      	b.n	800597a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3310      	adds	r3, #16
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff fef2 	bl	8005754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3324      	adds	r3, #36	; 0x24
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff feed 	bl	8005754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800597a:	f002 f833 	bl	80079e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800597e:	2301      	movs	r3, #1
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	; 0x38
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <xQueueGenericCreateStatic+0x52>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <xQueueGenericCreateStatic+0x56>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueGenericCreateStatic+0x58>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	623b      	str	r3, [r7, #32]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <xQueueGenericCreateStatic+0x7e>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <xQueueGenericCreateStatic+0x82>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xQueueGenericCreateStatic+0x84>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10a      	bne.n	8005a2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	61fb      	str	r3, [r7, #28]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a2a:	2350      	movs	r3, #80	; 0x50
 8005a2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b50      	cmp	r3, #80	; 0x50
 8005a32:	d00a      	beq.n	8005a4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	61bb      	str	r3, [r7, #24]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4613      	mov	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f805 	bl	8005a7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3730      	adds	r7, #48	; 0x30
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aaa:	2101      	movs	r1, #1
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7ff ff05 	bl	80058bc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08e      	sub	sp, #56	; 0x38
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <xQueueGenericSend+0x40>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <xQueueGenericSend+0x44>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <xQueueGenericSend+0x46>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <xQueueGenericSend+0x60>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSend+0x6e>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSend+0x72>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSend+0x74>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10a      	bne.n	8005b52 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	623b      	str	r3, [r7, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b52:	f001 f9bd 	bl	8006ed0 <xTaskGetSchedulerState>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <xQueueGenericSend+0x9e>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSend+0xa2>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSend+0xa4>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <xQueueGenericSend+0xbe>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	61fb      	str	r3, [r7, #28]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b82:	f001 feff 	bl	8007984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <xQueueGenericSend+0xd4>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d129      	bne.n	8005bec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9e:	f000 fa0b 	bl	8005fb8 <prvCopyDataToQueue>
 8005ba2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	3324      	adds	r3, #36	; 0x24
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 ffcf 	bl	8006b54 <xTaskRemoveFromEventList>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d013      	beq.n	8005be4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <xQueueGenericSend+0x1f8>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	e00a      	b.n	8005be4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <xQueueGenericSend+0x1f8>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005be4:	f001 fefe 	bl	80079e4 <vPortExitCritical>
				return pdPASS;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e063      	b.n	8005cb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bf2:	f001 fef7 	bl	80079e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e05c      	b.n	8005cb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c00:	f107 0314 	add.w	r3, r7, #20
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 f809 	bl	8006c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c0e:	f001 fee9 	bl	80079e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c12:	f000 fd7b 	bl	800670c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c16:	f001 feb5 	bl	8007984 <vPortEnterCritical>
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d103      	bne.n	8005c30 <xQueueGenericSend+0x16c>
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d103      	bne.n	8005c46 <xQueueGenericSend+0x182>
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c46:	f001 fecd 	bl	80079e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c4a:	1d3a      	adds	r2, r7, #4
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fff8 	bl	8006c48 <xTaskCheckForTimeOut>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d124      	bne.n	8005ca8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c60:	f000 faa2 	bl	80061a8 <prvIsQueueFull>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d018      	beq.n	8005c9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ff1e 	bl	8006ab4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fa2d 	bl	80060d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c7e:	f000 fd53 	bl	8006728 <xTaskResumeAll>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f47f af7c 	bne.w	8005b82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <xQueueGenericSend+0x1f8>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	e772      	b.n	8005b82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c9e:	f000 fa1b 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ca2:	f000 fd41 	bl	8006728 <xTaskResumeAll>
 8005ca6:	e76c      	b.n	8005b82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005caa:	f000 fa15 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cae:	f000 fd3b 	bl	8006728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3738      	adds	r7, #56	; 0x38
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b090      	sub	sp, #64	; 0x40
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <xQueueGenericSendFromISR+0x3c>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <xQueueGenericSendFromISR+0x40>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <xQueueGenericSendFromISR+0x42>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d103      	bne.n	8005d2a <xQueueGenericSendFromISR+0x6a>
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <xQueueGenericSendFromISR+0x6e>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <xQueueGenericSendFromISR+0x70>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	623b      	str	r3, [r7, #32]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d4a:	f001 fefd 	bl	8007b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d4e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	61fa      	str	r2, [r7, #28]
 8005d64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d302      	bcc.n	8005d7c <xQueueGenericSendFromISR+0xbc>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d12f      	bne.n	8005ddc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d92:	f000 f911 	bl	8005fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d112      	bne.n	8005dc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d016      	beq.n	8005dd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	3324      	adds	r3, #36	; 0x24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fed1 	bl	8006b54 <xTaskRemoveFromEventList>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00e      	beq.n	8005dd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e007      	b.n	8005dd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dca:	3301      	adds	r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	b25a      	sxtb	r2, r3
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005dda:	e001      	b.n	8005de0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3740      	adds	r7, #64	; 0x40
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	; 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <xQueueReceive+0x30>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	623b      	str	r3, [r7, #32]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <xQueueReceive+0x3e>
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <xQueueReceive+0x42>
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <xQueueReceive+0x44>
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xQueueReceive+0x5e>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e56:	f001 f83b 	bl	8006ed0 <xTaskGetSchedulerState>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d102      	bne.n	8005e66 <xQueueReceive+0x6e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <xQueueReceive+0x72>
 8005e66:	2301      	movs	r3, #1
 8005e68:	e000      	b.n	8005e6c <xQueueReceive+0x74>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <xQueueReceive+0x8e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	61bb      	str	r3, [r7, #24]
}
 8005e82:	bf00      	nop
 8005e84:	e7fe      	b.n	8005e84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e86:	f001 fd7d 	bl	8007984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01f      	beq.n	8005ed6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e96:	68b9      	ldr	r1, [r7, #8]
 8005e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9a:	f000 f8f7 	bl	800608c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00f      	beq.n	8005ece <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	3310      	adds	r3, #16
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fe4e 	bl	8006b54 <xTaskRemoveFromEventList>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d007      	beq.n	8005ece <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ebe:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <xQueueReceive+0x1bc>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ece:	f001 fd89 	bl	80079e4 <vPortExitCritical>
				return pdPASS;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e069      	b.n	8005faa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005edc:	f001 fd82 	bl	80079e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e062      	b.n	8005faa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eea:	f107 0310 	add.w	r3, r7, #16
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 fe94 	bl	8006c1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ef8:	f001 fd74 	bl	80079e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005efc:	f000 fc06 	bl	800670c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f00:	f001 fd40 	bl	8007984 <vPortEnterCritical>
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d103      	bne.n	8005f1a <xQueueReceive+0x122>
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d103      	bne.n	8005f30 <xQueueReceive+0x138>
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f30:	f001 fd58 	bl	80079e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f34:	1d3a      	adds	r2, r7, #4
 8005f36:	f107 0310 	add.w	r3, r7, #16
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fe83 	bl	8006c48 <xTaskCheckForTimeOut>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d123      	bne.n	8005f90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f4a:	f000 f917 	bl	800617c <prvIsQueueEmpty>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d017      	beq.n	8005f84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fda9 	bl	8006ab4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f64:	f000 f8b8 	bl	80060d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f68:	f000 fbde 	bl	8006728 <xTaskResumeAll>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d189      	bne.n	8005e86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <xQueueReceive+0x1bc>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e780      	b.n	8005e86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f86:	f000 f8a7 	bl	80060d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8a:	f000 fbcd 	bl	8006728 <xTaskResumeAll>
 8005f8e:	e77a      	b.n	8005e86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f92:	f000 f8a1 	bl	80060d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f96:	f000 fbc7 	bl	8006728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9c:	f000 f8ee 	bl	800617c <prvIsQueueEmpty>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f43f af6f 	beq.w	8005e86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3730      	adds	r7, #48	; 0x30
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d14d      	bne.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 ff92 	bl	8006f0c <xTaskPriorityDisinherit>
 8005fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e043      	b.n	800607a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d119      	bne.n	800602c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6858      	ldr	r0, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	461a      	mov	r2, r3
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	f001 fff6 	bl	8007ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	441a      	add	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	429a      	cmp	r2, r3
 8006020:	d32b      	bcc.n	800607a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	e026      	b.n	800607a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68d8      	ldr	r0, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f001 ffdc 	bl	8007ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	425b      	negs	r3, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d207      	bcs.n	8006068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	425b      	negs	r3, r3
 8006062:	441a      	add	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d105      	bne.n	800607a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	3b01      	subs	r3, #1
 8006078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006082:	697b      	ldr	r3, [r7, #20]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	441a      	add	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d303      	bcc.n	80060c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68d9      	ldr	r1, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	461a      	mov	r2, r3
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f001 ff92 	bl	8007ff4 <memcpy>
	}
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 fc50 	bl	8007984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ec:	e011      	b.n	8006112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fd2a 	bl	8006b54 <xTaskRemoveFromEventList>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006106:	f000 fe01 	bl	8006d0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	3b01      	subs	r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	dce9      	bgt.n	80060ee <prvUnlockQueue+0x16>
 800611a:	e000      	b.n	800611e <prvUnlockQueue+0x46>
					break;
 800611c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	22ff      	movs	r2, #255	; 0xff
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006126:	f001 fc5d 	bl	80079e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800612a:	f001 fc2b 	bl	8007984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006136:	e011      	b.n	800615c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d012      	beq.n	8006166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fd05 	bl	8006b54 <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006150:	f000 fddc 	bl	8006d0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	3b01      	subs	r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	dce9      	bgt.n	8006138 <prvUnlockQueue+0x60>
 8006164:	e000      	b.n	8006168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	22ff      	movs	r2, #255	; 0xff
 800616c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006170:	f001 fc38 	bl	80079e4 <vPortExitCritical>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006184:	f001 fbfe 	bl	8007984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006190:	2301      	movs	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e001      	b.n	800619a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800619a:	f001 fc23 	bl	80079e4 <vPortExitCritical>

	return xReturn;
 800619e:	68fb      	ldr	r3, [r7, #12]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b0:	f001 fbe8 	bl	8007984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d102      	bne.n	80061c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e001      	b.n	80061ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ca:	f001 fc0b 	bl	80079e4 <vPortExitCritical>

	return xReturn;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	e014      	b.n	8006212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061e8:	4a0f      	ldr	r2, [pc, #60]	; (8006228 <vQueueAddToRegistry+0x50>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10b      	bne.n	800620c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061f4:	490c      	ldr	r1, [pc, #48]	; (8006228 <vQueueAddToRegistry+0x50>)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <vQueueAddToRegistry+0x50>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4413      	add	r3, r2
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800620a:	e006      	b.n	800621a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b07      	cmp	r3, #7
 8006216:	d9e7      	bls.n	80061e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	24000790 	.word	0x24000790

0800622c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800623c:	f001 fba2 	bl	8007984 <vPortEnterCritical>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006246:	b25b      	sxtb	r3, r3
 8006248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624c:	d103      	bne.n	8006256 <vQueueWaitForMessageRestricted+0x2a>
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800625c:	b25b      	sxtb	r3, r3
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d103      	bne.n	800626c <vQueueWaitForMessageRestricted+0x40>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626c:	f001 fbba 	bl	80079e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	3324      	adds	r3, #36	; 0x24
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	68b9      	ldr	r1, [r7, #8]
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fc3b 	bl	8006afc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7ff ff26 	bl	80060d8 <prvUnlockQueue>
	}
 800628c:	bf00      	nop
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	; 0x38
 8006298:	af04      	add	r7, sp, #16
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTaskCreateStatic+0x2a>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	623b      	str	r3, [r7, #32]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <xTaskCreateStatic+0x46>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	61fb      	str	r3, [r7, #28]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062da:	235c      	movs	r3, #92	; 0x5c
 80062dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b5c      	cmp	r3, #92	; 0x5c
 80062e2:	d00a      	beq.n	80062fa <xTaskCreateStatic+0x66>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	61bb      	str	r3, [r7, #24]
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01e      	beq.n	8006340 <xTaskCreateStatic+0xac>
 8006302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01b      	beq.n	8006340 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2202      	movs	r2, #2
 8006316:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800631a:	2300      	movs	r3, #0
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	9302      	str	r3, [sp, #8]
 8006322:	f107 0314 	add.w	r3, r7, #20
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f850 	bl	80063d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800633a:	f000 f8dd 	bl	80064f8 <prvAddNewTaskToReadyList>
 800633e:	e001      	b.n	8006344 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006344:	697b      	ldr	r3, [r7, #20]
	}
 8006346:	4618      	mov	r0, r3
 8006348:	3728      	adds	r7, #40	; 0x28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800634e:	b580      	push	{r7, lr}
 8006350:	b08c      	sub	sp, #48	; 0x30
 8006352:	af04      	add	r7, sp, #16
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800635e:	88fb      	ldrh	r3, [r7, #6]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4618      	mov	r0, r3
 8006364:	f001 fc30 	bl	8007bc8 <pvPortMalloc>
 8006368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006370:	205c      	movs	r0, #92	; 0x5c
 8006372:	f001 fc29 	bl	8007bc8 <pvPortMalloc>
 8006376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
 8006384:	e005      	b.n	8006392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006386:	6978      	ldr	r0, [r7, #20]
 8006388:	f001 fcea 	bl	8007d60 <vPortFree>
 800638c:	e001      	b.n	8006392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	2300      	movs	r3, #0
 80063a4:	9303      	str	r3, [sp, #12]
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	9302      	str	r3, [sp, #8]
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	9301      	str	r3, [sp, #4]
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f000 f80e 	bl	80063d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063bc:	69f8      	ldr	r0, [r7, #28]
 80063be:	f000 f89b 	bl	80064f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063c2:	2301      	movs	r3, #1
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	e002      	b.n	80063ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063ce:	69bb      	ldr	r3, [r7, #24]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	461a      	mov	r2, r3
 80063f0:	21a5      	movs	r1, #165	; 0xa5
 80063f2:	f001 fdd3 	bl	8007f9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006400:	440b      	add	r3, r1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <prvInitialiseNewTask+0x58>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	617b      	str	r3, [r7, #20]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01f      	beq.n	8006476 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e012      	b.n	8006462 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	7819      	ldrb	r1, [r3, #0]
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	3334      	adds	r3, #52	; 0x34
 800644c:	460a      	mov	r2, r1
 800644e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	3301      	adds	r3, #1
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b0f      	cmp	r3, #15
 8006466:	d9e9      	bls.n	800643c <prvInitialiseNewTask+0x64>
 8006468:	e000      	b.n	800646c <prvInitialiseNewTask+0x94>
			{
				break;
 800646a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006474:	e003      	b.n	800647e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2b37      	cmp	r3, #55	; 0x37
 8006482:	d901      	bls.n	8006488 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006484:	2337      	movs	r3, #55	; 0x37
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006492:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2200      	movs	r2, #0
 8006498:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	3304      	adds	r3, #4
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff f978 	bl	8005794 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	3318      	adds	r3, #24
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff f973 	bl	8005794 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	69b8      	ldr	r0, [r7, #24]
 80064d8:	f001 f928 	bl	800772c <pxPortInitialiseStack>
 80064dc:	4602      	mov	r2, r0
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064ee:	bf00      	nop
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006500:	f001 fa40 	bl	8007984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006504:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <prvAddNewTaskToReadyList+0xc4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3301      	adds	r3, #1
 800650a:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <prvAddNewTaskToReadyList+0xc4>)
 800650c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800650e:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006516:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800651c:	4b27      	ldr	r3, [pc, #156]	; (80065bc <prvAddNewTaskToReadyList+0xc4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d110      	bne.n	8006546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006524:	f000 fc16 	bl	8006d54 <prvInitialiseTaskLists>
 8006528:	e00d      	b.n	8006546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800652a:	4b26      	ldr	r3, [pc, #152]	; (80065c4 <prvAddNewTaskToReadyList+0xcc>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006532:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d802      	bhi.n	8006546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006546:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3301      	adds	r3, #1
 800654c:	4a1e      	ldr	r2, [pc, #120]	; (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 800654e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <prvAddNewTaskToReadyList+0xd0>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655c:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <prvAddNewTaskToReadyList+0xd4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d903      	bls.n	800656c <prvAddNewTaskToReadyList+0x74>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	4a18      	ldr	r2, [pc, #96]	; (80065cc <prvAddNewTaskToReadyList+0xd4>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <prvAddNewTaskToReadyList+0xd8>)
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff f913 	bl	80057ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006588:	f001 fa2c 	bl	80079e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <prvAddNewTaskToReadyList+0xcc>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00e      	beq.n	80065b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006594:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <prvAddNewTaskToReadyList+0xc8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d207      	bcs.n	80065b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065a2:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <prvAddNewTaskToReadyList+0xdc>)
 80065a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b2:	bf00      	nop
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	24000ca4 	.word	0x24000ca4
 80065c0:	240007d0 	.word	0x240007d0
 80065c4:	24000cb0 	.word	0x24000cb0
 80065c8:	24000cc0 	.word	0x24000cc0
 80065cc:	24000cac 	.word	0x24000cac
 80065d0:	240007d4 	.word	0x240007d4
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <vTaskDelay+0x60>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <vTaskDelay+0x30>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	60bb      	str	r3, [r7, #8]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006608:	f000 f880 	bl	800670c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800660c:	2100      	movs	r1, #0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fcea 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006614:	f000 f888 	bl	8006728 <xTaskResumeAll>
 8006618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d107      	bne.n	8006630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <vTaskDelay+0x64>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	24000ccc 	.word	0x24000ccc
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006646:	2300      	movs	r3, #0
 8006648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800664a:	2300      	movs	r3, #0
 800664c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800664e:	463a      	mov	r2, r7
 8006650:	1d39      	adds	r1, r7, #4
 8006652:	f107 0308 	add.w	r3, r7, #8
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff f848 	bl	80056ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	9202      	str	r2, [sp, #8]
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	2300      	movs	r3, #0
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	460a      	mov	r2, r1
 800666e:	4921      	ldr	r1, [pc, #132]	; (80066f4 <vTaskStartScheduler+0xb4>)
 8006670:	4821      	ldr	r0, [pc, #132]	; (80066f8 <vTaskStartScheduler+0xb8>)
 8006672:	f7ff fe0f 	bl	8006294 <xTaskCreateStatic>
 8006676:	4603      	mov	r3, r0
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <vTaskStartScheduler+0xbc>)
 800667a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800667c:	4b1f      	ldr	r3, [pc, #124]	; (80066fc <vTaskStartScheduler+0xbc>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e001      	b.n	800668e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d102      	bne.n	800669a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006694:	f000 fcfc 	bl	8007090 <xTimerCreateTimerTask>
 8006698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d116      	bne.n	80066ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	613b      	str	r3, [r7, #16]
}
 80066b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <vTaskStartScheduler+0xc0>)
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066bc:	4b11      	ldr	r3, [pc, #68]	; (8006704 <vTaskStartScheduler+0xc4>)
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <vTaskStartScheduler+0xc8>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066c8:	f001 f8ba 	bl	8007840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066cc:	e00e      	b.n	80066ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d10a      	bne.n	80066ec <vTaskStartScheduler+0xac>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60fb      	str	r3, [r7, #12]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vTaskStartScheduler+0xaa>
}
 80066ec:	bf00      	nop
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	080080c4 	.word	0x080080c4
 80066f8:	08006d25 	.word	0x08006d25
 80066fc:	24000cc8 	.word	0x24000cc8
 8006700:	24000cc4 	.word	0x24000cc4
 8006704:	24000cb0 	.word	0x24000cb0
 8006708:	24000ca8 	.word	0x24000ca8

0800670c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <vTaskSuspendAll+0x18>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	4a03      	ldr	r2, [pc, #12]	; (8006724 <vTaskSuspendAll+0x18>)
 8006718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	24000ccc 	.word	0x24000ccc

08006728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006736:	4b42      	ldr	r3, [pc, #264]	; (8006840 <xTaskResumeAll+0x118>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <xTaskResumeAll+0x2c>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	603b      	str	r3, [r7, #0]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006754:	f001 f916 	bl	8007984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006758:	4b39      	ldr	r3, [pc, #228]	; (8006840 <xTaskResumeAll+0x118>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3b01      	subs	r3, #1
 800675e:	4a38      	ldr	r2, [pc, #224]	; (8006840 <xTaskResumeAll+0x118>)
 8006760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <xTaskResumeAll+0x118>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d162      	bne.n	8006830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800676a:	4b36      	ldr	r3, [pc, #216]	; (8006844 <xTaskResumeAll+0x11c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d05e      	beq.n	8006830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006772:	e02f      	b.n	80067d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006774:	4b34      	ldr	r3, [pc, #208]	; (8006848 <xTaskResumeAll+0x120>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3318      	adds	r3, #24
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff f871 	bl	8005868 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff f86c 	bl	8005868 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4b2d      	ldr	r3, [pc, #180]	; (800684c <xTaskResumeAll+0x124>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <xTaskResumeAll+0x7c>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a2a      	ldr	r2, [pc, #168]	; (800684c <xTaskResumeAll+0x124>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a27      	ldr	r2, [pc, #156]	; (8006850 <xTaskResumeAll+0x128>)
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fff7 	bl	80057ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4b23      	ldr	r3, [pc, #140]	; (8006854 <xTaskResumeAll+0x12c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067ce:	4b22      	ldr	r3, [pc, #136]	; (8006858 <xTaskResumeAll+0x130>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067d4:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <xTaskResumeAll+0x120>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1cb      	bne.n	8006774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067e2:	f000 fb55 	bl	8006e90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067e6:	4b1d      	ldr	r3, [pc, #116]	; (800685c <xTaskResumeAll+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067f2:	f000 f847 	bl	8006884 <xTaskIncrementTick>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067fc:	4b16      	ldr	r3, [pc, #88]	; (8006858 <xTaskResumeAll+0x130>)
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3b01      	subs	r3, #1
 8006806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f1      	bne.n	80067f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <xTaskResumeAll+0x134>)
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <xTaskResumeAll+0x130>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <xTaskResumeAll+0x138>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006830:	f001 f8d8 	bl	80079e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006834:	68bb      	ldr	r3, [r7, #8]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	24000ccc 	.word	0x24000ccc
 8006844:	24000ca4 	.word	0x24000ca4
 8006848:	24000c64 	.word	0x24000c64
 800684c:	24000cac 	.word	0x24000cac
 8006850:	240007d4 	.word	0x240007d4
 8006854:	240007d0 	.word	0x240007d0
 8006858:	24000cb8 	.word	0x24000cb8
 800685c:	24000cb4 	.word	0x24000cb4
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800686a:	4b05      	ldr	r3, [pc, #20]	; (8006880 <xTaskGetTickCount+0x1c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006870:	687b      	ldr	r3, [r7, #4]
}
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	24000ca8 	.word	0x24000ca8

08006884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800688e:	4b4f      	ldr	r3, [pc, #316]	; (80069cc <xTaskIncrementTick+0x148>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f040 808f 	bne.w	80069b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006898:	4b4d      	ldr	r3, [pc, #308]	; (80069d0 <xTaskIncrementTick+0x14c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068a0:	4a4b      	ldr	r2, [pc, #300]	; (80069d0 <xTaskIncrementTick+0x14c>)
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d120      	bne.n	80068ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068ac:	4b49      	ldr	r3, [pc, #292]	; (80069d4 <xTaskIncrementTick+0x150>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <xTaskIncrementTick+0x48>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	603b      	str	r3, [r7, #0]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <xTaskIncrementTick+0x46>
 80068cc:	4b41      	ldr	r3, [pc, #260]	; (80069d4 <xTaskIncrementTick+0x150>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <xTaskIncrementTick+0x154>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a3f      	ldr	r2, [pc, #252]	; (80069d4 <xTaskIncrementTick+0x150>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <xTaskIncrementTick+0x154>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6013      	str	r3, [r2, #0]
 80068e0:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <xTaskIncrementTick+0x158>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a3d      	ldr	r2, [pc, #244]	; (80069dc <xTaskIncrementTick+0x158>)
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	f000 fad1 	bl	8006e90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068ee:	4b3c      	ldr	r3, [pc, #240]	; (80069e0 <xTaskIncrementTick+0x15c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d349      	bcc.n	800698c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f8:	4b36      	ldr	r3, [pc, #216]	; (80069d4 <xTaskIncrementTick+0x150>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006902:	4b37      	ldr	r3, [pc, #220]	; (80069e0 <xTaskIncrementTick+0x15c>)
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	601a      	str	r2, [r3, #0]
					break;
 800690a:	e03f      	b.n	800698c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800690c:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <xTaskIncrementTick+0x150>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	429a      	cmp	r2, r3
 8006922:	d203      	bcs.n	800692c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006924:	4a2e      	ldr	r2, [pc, #184]	; (80069e0 <xTaskIncrementTick+0x15c>)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800692a:	e02f      	b.n	800698c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe ff99 	bl	8005868 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	3318      	adds	r3, #24
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe ff90 	bl	8005868 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <xTaskIncrementTick+0x160>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d903      	bls.n	800695c <xTaskIncrementTick+0xd8>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <xTaskIncrementTick+0x160>)
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <xTaskIncrementTick+0x164>)
 800696a:	441a      	add	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3304      	adds	r3, #4
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7fe ff1b 	bl	80057ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <xTaskIncrementTick+0x168>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	429a      	cmp	r2, r3
 8006984:	d3b8      	bcc.n	80068f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800698a:	e7b5      	b.n	80068f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800698c:	4b17      	ldr	r3, [pc, #92]	; (80069ec <xTaskIncrementTick+0x168>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4915      	ldr	r1, [pc, #84]	; (80069e8 <xTaskIncrementTick+0x164>)
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d901      	bls.n	80069a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069a8:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <xTaskIncrementTick+0x16c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e004      	b.n	80069c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xTaskIncrementTick+0x170>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <xTaskIncrementTick+0x170>)
 80069be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069c0:	697b      	ldr	r3, [r7, #20]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	24000ccc 	.word	0x24000ccc
 80069d0:	24000ca8 	.word	0x24000ca8
 80069d4:	24000c5c 	.word	0x24000c5c
 80069d8:	24000c60 	.word	0x24000c60
 80069dc:	24000cbc 	.word	0x24000cbc
 80069e0:	24000cc4 	.word	0x24000cc4
 80069e4:	24000cac 	.word	0x24000cac
 80069e8:	240007d4 	.word	0x240007d4
 80069ec:	240007d0 	.word	0x240007d0
 80069f0:	24000cb8 	.word	0x24000cb8
 80069f4:	24000cb4 	.word	0x24000cb4

080069f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069fe:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <vTaskSwitchContext+0xa8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a06:	4b27      	ldr	r3, [pc, #156]	; (8006aa4 <vTaskSwitchContext+0xac>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a0c:	e041      	b.n	8006a92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a0e:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <vTaskSwitchContext+0xac>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a14:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <vTaskSwitchContext+0xb0>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	e010      	b.n	8006a3e <vTaskSwitchContext+0x46>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	607b      	str	r3, [r7, #4]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vTaskSwitchContext+0x3e>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	491b      	ldr	r1, [pc, #108]	; (8006aac <vTaskSwitchContext+0xb4>)
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0e4      	beq.n	8006a1c <vTaskSwitchContext+0x24>
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <vTaskSwitchContext+0xb4>)
 8006a5e:	4413      	add	r3, r2
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3308      	adds	r3, #8
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d104      	bne.n	8006a82 <vTaskSwitchContext+0x8a>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vTaskSwitchContext+0xb8>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <vTaskSwitchContext+0xb0>)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	24000ccc 	.word	0x24000ccc
 8006aa4:	24000cb8 	.word	0x24000cb8
 8006aa8:	24000cac 	.word	0x24000cac
 8006aac:	240007d4 	.word	0x240007d4
 8006ab0:	240007d0 	.word	0x240007d0

08006ab4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	60fb      	str	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <vTaskPlaceOnEventList+0x44>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3318      	adds	r3, #24
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7fe fe87 	bl	80057f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6838      	ldr	r0, [r7, #0]
 8006aec:	f000 fa7c 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	240007d0 	.word	0x240007d0

08006afc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	617b      	str	r3, [r7, #20]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7fe fe3e 	bl	80057ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b38:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	68b8      	ldr	r0, [r7, #8]
 8006b42:	f000 fa51 	bl	8006fe8 <prvAddCurrentTaskToDelayedList>
	}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	240007d0 	.word	0x240007d0

08006b54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60fb      	str	r3, [r7, #12]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	3318      	adds	r3, #24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fe fe6f 	bl	8005868 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b8a:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <xTaskRemoveFromEventList+0xb0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d11d      	bne.n	8006bce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fe66 	bl	8005868 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba0:	4b19      	ldr	r3, [pc, #100]	; (8006c08 <xTaskRemoveFromEventList+0xb4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d903      	bls.n	8006bb0 <xTaskRemoveFromEventList+0x5c>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <xTaskRemoveFromEventList+0xb4>)
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <xTaskRemoveFromEventList+0xb8>)
 8006bbe:	441a      	add	r2, r3
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f7fe fdf1 	bl	80057ae <vListInsertEnd>
 8006bcc:	e005      	b.n	8006bda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	480e      	ldr	r0, [pc, #56]	; (8006c10 <xTaskRemoveFromEventList+0xbc>)
 8006bd6:	f7fe fdea 	bl	80057ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <xTaskRemoveFromEventList+0xc0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d905      	bls.n	8006bf4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006be8:	2301      	movs	r3, #1
 8006bea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <xTaskRemoveFromEventList+0xc4>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e001      	b.n	8006bf8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bf8:	697b      	ldr	r3, [r7, #20]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	24000ccc 	.word	0x24000ccc
 8006c08:	24000cac 	.word	0x24000cac
 8006c0c:	240007d4 	.word	0x240007d4
 8006c10:	24000c64 	.word	0x24000c64
 8006c14:	240007d0 	.word	0x240007d0
 8006c18:	24000cb8 	.word	0x24000cb8

08006c1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <vTaskInternalSetTimeOutState+0x24>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c2c:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <vTaskInternalSetTimeOutState+0x28>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	605a      	str	r2, [r3, #4]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	24000cbc 	.word	0x24000cbc
 8006c44:	24000ca8 	.word	0x24000ca8

08006c48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	613b      	str	r3, [r7, #16]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	60fb      	str	r3, [r7, #12]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c8a:	f000 fe7b 	bl	8007984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <xTaskCheckForTimeOut+0xbc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d102      	bne.n	8006cae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e023      	b.n	8006cf6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <xTaskCheckForTimeOut+0xc0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d007      	beq.n	8006cca <xTaskCheckForTimeOut+0x82>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d302      	bcc.n	8006cca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e015      	b.n	8006cf6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d20b      	bcs.n	8006cec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ff9b 	bl	8006c1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
 8006cea:	e004      	b.n	8006cf6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cf6:	f000 fe75 	bl	80079e4 <vPortExitCritical>

	return xReturn;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3720      	adds	r7, #32
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	24000ca8 	.word	0x24000ca8
 8006d08:	24000cbc 	.word	0x24000cbc

08006d0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d10:	4b03      	ldr	r3, [pc, #12]	; (8006d20 <vTaskMissedYield+0x14>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	24000cb8 	.word	0x24000cb8

08006d24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d2c:	f000 f852 	bl	8006dd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d30:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <prvIdleTask+0x28>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d9f9      	bls.n	8006d2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d38:	4b05      	ldr	r3, [pc, #20]	; (8006d50 <prvIdleTask+0x2c>)
 8006d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d48:	e7f0      	b.n	8006d2c <prvIdleTask+0x8>
 8006d4a:	bf00      	nop
 8006d4c:	240007d4 	.word	0x240007d4
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	e00c      	b.n	8006d7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <prvInitialiseTaskLists+0x60>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fcf0 	bl	8005754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b37      	cmp	r3, #55	; 0x37
 8006d7e:	d9ef      	bls.n	8006d60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d80:	480d      	ldr	r0, [pc, #52]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006d82:	f7fe fce7 	bl	8005754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d86:	480d      	ldr	r0, [pc, #52]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006d88:	f7fe fce4 	bl	8005754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d8c:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <prvInitialiseTaskLists+0x6c>)
 8006d8e:	f7fe fce1 	bl	8005754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d92:	480c      	ldr	r0, [pc, #48]	; (8006dc4 <prvInitialiseTaskLists+0x70>)
 8006d94:	f7fe fcde 	bl	8005754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d98:	480b      	ldr	r0, [pc, #44]	; (8006dc8 <prvInitialiseTaskLists+0x74>)
 8006d9a:	f7fe fcdb 	bl	8005754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <prvInitialiseTaskLists+0x78>)
 8006da0:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <prvInitialiseTaskLists+0x64>)
 8006da2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da4:	4b0a      	ldr	r3, [pc, #40]	; (8006dd0 <prvInitialiseTaskLists+0x7c>)
 8006da6:	4a05      	ldr	r2, [pc, #20]	; (8006dbc <prvInitialiseTaskLists+0x68>)
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	240007d4 	.word	0x240007d4
 8006db8:	24000c34 	.word	0x24000c34
 8006dbc:	24000c48 	.word	0x24000c48
 8006dc0:	24000c64 	.word	0x24000c64
 8006dc4:	24000c78 	.word	0x24000c78
 8006dc8:	24000c90 	.word	0x24000c90
 8006dcc:	24000c5c 	.word	0x24000c5c
 8006dd0:	24000c60 	.word	0x24000c60

08006dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dda:	e019      	b.n	8006e10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ddc:	f000 fdd2 	bl	8007984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de0:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <prvCheckTasksWaitingTermination+0x50>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fd3b 	bl	8005868 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006df2:	4b0d      	ldr	r3, [pc, #52]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	4a0b      	ldr	r2, [pc, #44]	; (8006e28 <prvCheckTasksWaitingTermination+0x54>)
 8006dfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e06:	f000 fded 	bl	80079e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f810 	bl	8006e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <prvCheckTasksWaitingTermination+0x58>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e1      	bne.n	8006ddc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	24000c78 	.word	0x24000c78
 8006e28:	24000ca4 	.word	0x24000ca4
 8006e2c:	24000c8c 	.word	0x24000c8c

08006e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d108      	bne.n	8006e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 ff8a 	bl	8007d60 <vPortFree>
				vPortFree( pxTCB );
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 ff87 	bl	8007d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e52:	e018      	b.n	8006e86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d103      	bne.n	8006e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 ff7e 	bl	8007d60 <vPortFree>
	}
 8006e64:	e00f      	b.n	8006e86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d00a      	beq.n	8006e86 <prvDeleteTCB+0x56>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	e7fe      	b.n	8006e84 <prvDeleteTCB+0x54>
	}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
	...

08006e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvResetNextTaskUnblockTime+0x38>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <prvResetNextTaskUnblockTime+0x3c>)
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ea8:	e008      	b.n	8006ebc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <prvResetNextTaskUnblockTime+0x38>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <prvResetNextTaskUnblockTime+0x3c>)
 8006eba:	6013      	str	r3, [r2, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	24000c5c 	.word	0x24000c5c
 8006ecc:	24000cc4 	.word	0x24000cc4

08006ed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <xTaskGetSchedulerState+0x34>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	607b      	str	r3, [r7, #4]
 8006ee2:	e008      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <xTaskGetSchedulerState+0x38>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d102      	bne.n	8006ef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006eec:	2302      	movs	r3, #2
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	e001      	b.n	8006ef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ef6:	687b      	ldr	r3, [r7, #4]
	}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	24000cb0 	.word	0x24000cb0
 8006f08:	24000ccc 	.word	0x24000ccc

08006f0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d056      	beq.n	8006fd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <xTaskPriorityDisinherit+0xd0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d00a      	beq.n	8006f42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	60bb      	str	r3, [r7, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	1e5a      	subs	r2, r3, #1
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d02c      	beq.n	8006fd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d128      	bne.n	8006fd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fc70 	bl	8005868 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <xTaskPriorityDisinherit+0xd4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d903      	bls.n	8006fb0 <xTaskPriorityDisinherit+0xa4>
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a0c      	ldr	r2, [pc, #48]	; (8006fe0 <xTaskPriorityDisinherit+0xd4>)
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4a09      	ldr	r2, [pc, #36]	; (8006fe4 <xTaskPriorityDisinherit+0xd8>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe fbf1 	bl	80057ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fd0:	697b      	ldr	r3, [r7, #20]
	}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	240007d0 	.word	0x240007d0
 8006fe0:	24000cac 	.word	0x24000cac
 8006fe4:	240007d4 	.word	0x240007d4

08006fe8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ff2:	4b21      	ldr	r3, [pc, #132]	; (8007078 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ff8:	4b20      	ldr	r3, [pc, #128]	; (800707c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fc32 	bl	8005868 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	d10a      	bne.n	8007022 <prvAddCurrentTaskToDelayedList+0x3a>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <prvAddCurrentTaskToDelayedList+0x94>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4819      	ldr	r0, [pc, #100]	; (8007080 <prvAddCurrentTaskToDelayedList+0x98>)
 800701c:	f7fe fbc7 	bl	80057ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007020:	e026      	b.n	8007070 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800702a:	4b14      	ldr	r3, [pc, #80]	; (800707c <prvAddCurrentTaskToDelayedList+0x94>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	429a      	cmp	r2, r3
 8007038:	d209      	bcs.n	800704e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <prvAddCurrentTaskToDelayedList+0x9c>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <prvAddCurrentTaskToDelayedList+0x94>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe fbd5 	bl	80057f6 <vListInsert>
}
 800704c:	e010      	b.n	8007070 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800704e:	4b0e      	ldr	r3, [pc, #56]	; (8007088 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <prvAddCurrentTaskToDelayedList+0x94>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7fe fbcb 	bl	80057f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	d202      	bcs.n	8007070 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800706a:	4a08      	ldr	r2, [pc, #32]	; (800708c <prvAddCurrentTaskToDelayedList+0xa4>)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	24000ca8 	.word	0x24000ca8
 800707c:	240007d0 	.word	0x240007d0
 8007080:	24000c90 	.word	0x24000c90
 8007084:	24000c60 	.word	0x24000c60
 8007088:	24000c5c 	.word	0x24000c5c
 800708c:	24000cc4 	.word	0x24000cc4

08007090 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	; 0x28
 8007094:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800709a:	f000 fb07 	bl	80076ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800709e:	4b1c      	ldr	r3, [pc, #112]	; (8007110 <xTimerCreateTimerTask+0x80>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d021      	beq.n	80070ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070ae:	1d3a      	adds	r2, r7, #4
 80070b0:	f107 0108 	add.w	r1, r7, #8
 80070b4:	f107 030c 	add.w	r3, r7, #12
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fb31 	bl	8005720 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	9202      	str	r2, [sp, #8]
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	2302      	movs	r3, #2
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	2300      	movs	r3, #0
 80070ce:	460a      	mov	r2, r1
 80070d0:	4910      	ldr	r1, [pc, #64]	; (8007114 <xTimerCreateTimerTask+0x84>)
 80070d2:	4811      	ldr	r0, [pc, #68]	; (8007118 <xTimerCreateTimerTask+0x88>)
 80070d4:	f7ff f8de 	bl	8006294 <xTaskCreateStatic>
 80070d8:	4603      	mov	r3, r0
 80070da:	4a10      	ldr	r2, [pc, #64]	; (800711c <xTimerCreateTimerTask+0x8c>)
 80070dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80070de:	4b0f      	ldr	r3, [pc, #60]	; (800711c <xTimerCreateTimerTask+0x8c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80070e6:	2301      	movs	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	613b      	str	r3, [r7, #16]
}
 8007102:	bf00      	nop
 8007104:	e7fe      	b.n	8007104 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	24000d00 	.word	0x24000d00
 8007114:	080080cc 	.word	0x080080cc
 8007118:	08007255 	.word	0x08007255
 800711c:	24000d04 	.word	0x24000d04

08007120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	; 0x28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800712e:	2300      	movs	r3, #0
 8007130:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	623b      	str	r3, [r7, #32]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800714e:	4b1a      	ldr	r3, [pc, #104]	; (80071b8 <xTimerGenericCommand+0x98>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d02a      	beq.n	80071ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b05      	cmp	r3, #5
 8007166:	dc18      	bgt.n	800719a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007168:	f7ff feb2 	bl	8006ed0 <xTaskGetSchedulerState>
 800716c:	4603      	mov	r3, r0
 800716e:	2b02      	cmp	r3, #2
 8007170:	d109      	bne.n	8007186 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007172:	4b11      	ldr	r3, [pc, #68]	; (80071b8 <xTimerGenericCommand+0x98>)
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f107 0110 	add.w	r1, r7, #16
 800717a:	2300      	movs	r3, #0
 800717c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717e:	f7fe fca1 	bl	8005ac4 <xQueueGenericSend>
 8007182:	6278      	str	r0, [r7, #36]	; 0x24
 8007184:	e012      	b.n	80071ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007186:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <xTimerGenericCommand+0x98>)
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f107 0110 	add.w	r1, r7, #16
 800718e:	2300      	movs	r3, #0
 8007190:	2200      	movs	r2, #0
 8007192:	f7fe fc97 	bl	8005ac4 <xQueueGenericSend>
 8007196:	6278      	str	r0, [r7, #36]	; 0x24
 8007198:	e008      	b.n	80071ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800719a:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <xTimerGenericCommand+0x98>)
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	f107 0110 	add.w	r1, r7, #16
 80071a2:	2300      	movs	r3, #0
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	f7fe fd8b 	bl	8005cc0 <xQueueGenericSendFromISR>
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3728      	adds	r7, #40	; 0x28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	24000d00 	.word	0x24000d00

080071bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c6:	4b22      	ldr	r3, [pc, #136]	; (8007250 <prvProcessExpiredTimer+0x94>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fb47 	bl	8005868 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d022      	beq.n	800722e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	18d1      	adds	r1, r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6978      	ldr	r0, [r7, #20]
 80071f6:	f000 f8d1 	bl	800739c <prvInsertTimerInActiveList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01f      	beq.n	8007240 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007200:	2300      	movs	r3, #0
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2300      	movs	r3, #0
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	2100      	movs	r1, #0
 800720a:	6978      	ldr	r0, [r7, #20]
 800720c:	f7ff ff88 	bl	8007120 <xTimerGenericCommand>
 8007210:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d113      	bne.n	8007240 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
}
 800722a:	bf00      	nop
 800722c:	e7fe      	b.n	800722c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	6978      	ldr	r0, [r7, #20]
 8007246:	4798      	blx	r3
}
 8007248:	bf00      	nop
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	24000cf8 	.word	0x24000cf8

08007254 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800725c:	f107 0308 	add.w	r3, r7, #8
 8007260:	4618      	mov	r0, r3
 8007262:	f000 f857 	bl	8007314 <prvGetNextExpireTime>
 8007266:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4619      	mov	r1, r3
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f803 	bl	8007278 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007272:	f000 f8d5 	bl	8007420 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007276:	e7f1      	b.n	800725c <prvTimerTask+0x8>

08007278 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007282:	f7ff fa43 	bl	800670c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007286:	f107 0308 	add.w	r3, r7, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f866 	bl	800735c <prvSampleTimeNow>
 8007290:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d130      	bne.n	80072fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <prvProcessTimerOrBlockTask+0x3c>
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d806      	bhi.n	80072b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072a6:	f7ff fa3f 	bl	8006728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff ff85 	bl	80071bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072b2:	e024      	b.n	80072fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <prvProcessTimerOrBlockTask+0x90>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <prvProcessTimerOrBlockTask+0x50>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e000      	b.n	80072ca <prvProcessTimerOrBlockTask+0x52>
 80072c8:	2300      	movs	r3, #0
 80072ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072cc:	4b0f      	ldr	r3, [pc, #60]	; (800730c <prvProcessTimerOrBlockTask+0x94>)
 80072ce:	6818      	ldr	r0, [r3, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4619      	mov	r1, r3
 80072da:	f7fe ffa7 	bl	800622c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072de:	f7ff fa23 	bl	8006728 <xTaskResumeAll>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <prvProcessTimerOrBlockTask+0x98>)
 80072ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
}
 80072f8:	e001      	b.n	80072fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072fa:	f7ff fa15 	bl	8006728 <xTaskResumeAll>
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	24000cfc 	.word	0x24000cfc
 800730c:	24000d00 	.word	0x24000d00
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800731c:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <prvGetNextExpireTime+0x44>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <prvGetNextExpireTime+0x16>
 8007326:	2201      	movs	r2, #1
 8007328:	e000      	b.n	800732c <prvGetNextExpireTime+0x18>
 800732a:	2200      	movs	r2, #0
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d105      	bne.n	8007344 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <prvGetNextExpireTime+0x44>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e001      	b.n	8007348 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007348:	68fb      	ldr	r3, [r7, #12]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	24000cf8 	.word	0x24000cf8

0800735c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007364:	f7ff fa7e 	bl	8006864 <xTaskGetTickCount>
 8007368:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <prvSampleTimeNow+0x3c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	429a      	cmp	r2, r3
 8007372:	d205      	bcs.n	8007380 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007374:	f000 f936 	bl	80075e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	601a      	str	r2, [r3, #0]
 800737e:	e002      	b.n	8007386 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <prvSampleTimeNow+0x3c>)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800738c:	68fb      	ldr	r3, [r7, #12]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	24000d08 	.word	0x24000d08

0800739c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d812      	bhi.n	80073e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	1ad2      	subs	r2, r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d302      	bcc.n	80073d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e01b      	b.n	800740e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <prvInsertTimerInActiveList+0x7c>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7fe fa08 	bl	80057f6 <vListInsert>
 80073e6:	e012      	b.n	800740e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d206      	bcs.n	80073fe <prvInsertTimerInActiveList+0x62>
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d302      	bcc.n	80073fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073f8:	2301      	movs	r3, #1
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e007      	b.n	800740e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073fe:	4b07      	ldr	r3, [pc, #28]	; (800741c <prvInsertTimerInActiveList+0x80>)
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7fe f9f4 	bl	80057f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800740e:	697b      	ldr	r3, [r7, #20]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	24000cfc 	.word	0x24000cfc
 800741c:	24000cf8 	.word	0x24000cf8

08007420 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	; 0x38
 8007424:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007426:	e0ca      	b.n	80075be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da18      	bge.n	8007460 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800742e:	1d3b      	adds	r3, r7, #4
 8007430:	3304      	adds	r3, #4
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10a      	bne.n	8007450 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	61fb      	str	r3, [r7, #28]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007456:	6850      	ldr	r0, [r2, #4]
 8007458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800745a:	6892      	ldr	r2, [r2, #8]
 800745c:	4611      	mov	r1, r2
 800745e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f2c0 80ab 	blt.w	80075be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800746c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	3304      	adds	r3, #4
 8007478:	4618      	mov	r0, r3
 800747a:	f7fe f9f5 	bl	8005868 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800747e:	463b      	mov	r3, r7
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff6b 	bl	800735c <prvSampleTimeNow>
 8007486:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b09      	cmp	r3, #9
 800748c:	f200 8096 	bhi.w	80075bc <prvProcessReceivedCommands+0x19c>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <prvProcessReceivedCommands+0x78>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	08007535 	.word	0x08007535
 80074a8:	08007549 	.word	0x08007549
 80074ac:	08007593 	.word	0x08007593
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074c1 	.word	0x080074c1
 80074b8:	08007535 	.word	0x08007535
 80074bc:	08007549 	.word	0x08007549
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	18d1      	adds	r1, r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e0:	f7ff ff5c 	bl	800739c <prvInsertTimerInActiveList>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d069      	beq.n	80075be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d05e      	beq.n	80075be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	441a      	add	r2, r3
 8007508:	2300      	movs	r3, #0
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	2300      	movs	r3, #0
 800750e:	2100      	movs	r1, #0
 8007510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007512:	f7ff fe05 	bl	8007120 <xTimerGenericCommand>
 8007516:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d14f      	bne.n	80075be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	61bb      	str	r3, [r7, #24]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007546:	e03a      	b.n	80075be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	617b      	str	r3, [r7, #20]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	18d1      	adds	r1, r2, r3
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758c:	f7ff ff06 	bl	800739c <prvInsertTimerInActiveList>
					break;
 8007590:	e015      	b.n	80075be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d103      	bne.n	80075a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80075a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a2:	f000 fbdd 	bl	8007d60 <vPortFree>
 80075a6:	e00a      	b.n	80075be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075ba:	e000      	b.n	80075be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80075bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <prvProcessReceivedCommands+0x1c0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1d39      	adds	r1, r7, #4
 80075c4:	2200      	movs	r2, #0
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fc16 	bl	8005df8 <xQueueReceive>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f47f af2a 	bne.w	8007428 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3730      	adds	r7, #48	; 0x30
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	24000d00 	.word	0x24000d00

080075e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075ea:	e048      	b.n	800767e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f6:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3304      	adds	r3, #4
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe f92f 	bl	8005868 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d02e      	beq.n	800767e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4413      	add	r3, r2
 8007628:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d90e      	bls.n	8007650 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800763e:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f7fe f8d4 	bl	80057f6 <vListInsert>
 800764e:	e016      	b.n	800767e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	2300      	movs	r3, #0
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	2100      	movs	r1, #0
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fd60 	bl	8007120 <xTimerGenericCommand>
 8007660:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10a      	bne.n	800767e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	603b      	str	r3, [r7, #0]
}
 800767a:	bf00      	nop
 800767c:	e7fe      	b.n	800767c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1b1      	bne.n	80075ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800768e:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <prvSwitchTimerLists+0xc4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a04      	ldr	r2, [pc, #16]	; (80076a4 <prvSwitchTimerLists+0xc0>)
 8007694:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007696:	4a04      	ldr	r2, [pc, #16]	; (80076a8 <prvSwitchTimerLists+0xc4>)
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	24000cf8 	.word	0x24000cf8
 80076a8:	24000cfc 	.word	0x24000cfc

080076ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076b2:	f000 f967 	bl	8007984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <prvCheckForValidListAndQueue+0x60>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d120      	bne.n	8007700 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80076be:	4814      	ldr	r0, [pc, #80]	; (8007710 <prvCheckForValidListAndQueue+0x64>)
 80076c0:	f7fe f848 	bl	8005754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80076c4:	4813      	ldr	r0, [pc, #76]	; (8007714 <prvCheckForValidListAndQueue+0x68>)
 80076c6:	f7fe f845 	bl	8005754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <prvCheckForValidListAndQueue+0x6c>)
 80076cc:	4a10      	ldr	r2, [pc, #64]	; (8007710 <prvCheckForValidListAndQueue+0x64>)
 80076ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <prvCheckForValidListAndQueue+0x70>)
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <prvCheckForValidListAndQueue+0x68>)
 80076d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076d6:	2300      	movs	r3, #0
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	4b11      	ldr	r3, [pc, #68]	; (8007720 <prvCheckForValidListAndQueue+0x74>)
 80076dc:	4a11      	ldr	r2, [pc, #68]	; (8007724 <prvCheckForValidListAndQueue+0x78>)
 80076de:	2110      	movs	r1, #16
 80076e0:	200a      	movs	r0, #10
 80076e2:	f7fe f953 	bl	800598c <xQueueGenericCreateStatic>
 80076e6:	4603      	mov	r3, r0
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <prvCheckForValidListAndQueue+0x60>)
 80076ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <prvCheckForValidListAndQueue+0x60>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <prvCheckForValidListAndQueue+0x60>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	490b      	ldr	r1, [pc, #44]	; (8007728 <prvCheckForValidListAndQueue+0x7c>)
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe fd6c 	bl	80061d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007700:	f000 f970 	bl	80079e4 <vPortExitCritical>
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	24000d00 	.word	0x24000d00
 8007710:	24000cd0 	.word	0x24000cd0
 8007714:	24000ce4 	.word	0x24000ce4
 8007718:	24000cf8 	.word	0x24000cf8
 800771c:	24000cfc 	.word	0x24000cfc
 8007720:	24000dac 	.word	0x24000dac
 8007724:	24000d0c 	.word	0x24000d0c
 8007728:	080080d4 	.word	0x080080d4

0800772c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3b04      	subs	r3, #4
 800773c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3b04      	subs	r3, #4
 800774a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0201 	bic.w	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3b04      	subs	r3, #4
 800775a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800775c:	4a0c      	ldr	r2, [pc, #48]	; (8007790 <pxPortInitialiseStack+0x64>)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3b14      	subs	r3, #20
 8007766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3b04      	subs	r3, #4
 8007772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f06f 0202 	mvn.w	r2, #2
 800777a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3b20      	subs	r3, #32
 8007780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	08007795 	.word	0x08007795

08007794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <prvTaskExitError+0x54>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d00a      	beq.n	80077be <prvTaskExitError+0x2a>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <prvTaskExitError+0x28>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	60bb      	str	r3, [r7, #8]
}
 80077d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077d2:	bf00      	nop
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0fc      	beq.n	80077d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	24000010 	.word	0x24000010
 80077ec:	00000000 	.word	0x00000000

080077f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <pxCurrentTCBConst2>)
 80077f2:	6819      	ldr	r1, [r3, #0]
 80077f4:	6808      	ldr	r0, [r1, #0]
 80077f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	f380 8809 	msr	PSP, r0
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f380 8811 	msr	BASEPRI, r0
 800780a:	4770      	bx	lr
 800780c:	f3af 8000 	nop.w

08007810 <pxCurrentTCBConst2>:
 8007810:	240007d0 	.word	0x240007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop

08007818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007818:	4808      	ldr	r0, [pc, #32]	; (800783c <prvPortStartFirstTask+0x24>)
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	6800      	ldr	r0, [r0, #0]
 800781e:	f380 8808 	msr	MSP, r0
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f380 8814 	msr	CONTROL, r0
 800782a:	b662      	cpsie	i
 800782c:	b661      	cpsie	f
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	df00      	svc	0
 8007838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800783a:	bf00      	nop
 800783c:	e000ed08 	.word	0xe000ed08

08007840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007846:	4b46      	ldr	r3, [pc, #280]	; (8007960 <xPortStartScheduler+0x120>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a46      	ldr	r2, [pc, #280]	; (8007964 <xPortStartScheduler+0x124>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10a      	bne.n	8007866 <xPortStartScheduler+0x26>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	613b      	str	r3, [r7, #16]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007866:	4b3e      	ldr	r3, [pc, #248]	; (8007960 <xPortStartScheduler+0x120>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a3f      	ldr	r2, [pc, #252]	; (8007968 <xPortStartScheduler+0x128>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d10a      	bne.n	8007886 <xPortStartScheduler+0x46>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	60fb      	str	r3, [r7, #12]
}
 8007882:	bf00      	nop
 8007884:	e7fe      	b.n	8007884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007886:	4b39      	ldr	r3, [pc, #228]	; (800796c <xPortStartScheduler+0x12c>)
 8007888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <xPortStartScheduler+0x130>)
 80078ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ae:	4b31      	ldr	r3, [pc, #196]	; (8007974 <xPortStartScheduler+0x134>)
 80078b0:	2207      	movs	r2, #7
 80078b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078b4:	e009      	b.n	80078ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80078b6:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <xPortStartScheduler+0x134>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	4a2d      	ldr	r2, [pc, #180]	; (8007974 <xPortStartScheduler+0x134>)
 80078be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b80      	cmp	r3, #128	; 0x80
 80078d4:	d0ef      	beq.n	80078b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078d6:	4b27      	ldr	r3, [pc, #156]	; (8007974 <xPortStartScheduler+0x134>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f1c3 0307 	rsb	r3, r3, #7
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d00a      	beq.n	80078f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	60bb      	str	r3, [r7, #8]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078f8:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <xPortStartScheduler+0x134>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	021b      	lsls	r3, r3, #8
 80078fe:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <xPortStartScheduler+0x134>)
 8007900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007902:	4b1c      	ldr	r3, [pc, #112]	; (8007974 <xPortStartScheduler+0x134>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800790a:	4a1a      	ldr	r2, [pc, #104]	; (8007974 <xPortStartScheduler+0x134>)
 800790c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	b2da      	uxtb	r2, r3
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007916:	4b18      	ldr	r3, [pc, #96]	; (8007978 <xPortStartScheduler+0x138>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a17      	ldr	r2, [pc, #92]	; (8007978 <xPortStartScheduler+0x138>)
 800791c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <xPortStartScheduler+0x138>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a14      	ldr	r2, [pc, #80]	; (8007978 <xPortStartScheduler+0x138>)
 8007928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800792c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800792e:	f000 f8dd 	bl	8007aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <xPortStartScheduler+0x13c>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007938:	f000 f8fc 	bl	8007b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800793c:	4b10      	ldr	r3, [pc, #64]	; (8007980 <xPortStartScheduler+0x140>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a0f      	ldr	r2, [pc, #60]	; (8007980 <xPortStartScheduler+0x140>)
 8007942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007948:	f7ff ff66 	bl	8007818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800794c:	f7ff f854 	bl	80069f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007950:	f7ff ff20 	bl	8007794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed00 	.word	0xe000ed00
 8007964:	410fc271 	.word	0x410fc271
 8007968:	410fc270 	.word	0x410fc270
 800796c:	e000e400 	.word	0xe000e400
 8007970:	24000dfc 	.word	0x24000dfc
 8007974:	24000e00 	.word	0x24000e00
 8007978:	e000ed20 	.word	0xe000ed20
 800797c:	24000010 	.word	0x24000010
 8007980:	e000ef34 	.word	0xe000ef34

08007984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	607b      	str	r3, [r7, #4]
}
 800799c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <vPortEnterCritical+0x58>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3301      	adds	r3, #1
 80079a4:	4a0d      	ldr	r2, [pc, #52]	; (80079dc <vPortEnterCritical+0x58>)
 80079a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079a8:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <vPortEnterCritical+0x58>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d10f      	bne.n	80079d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <vPortEnterCritical+0x5c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	603b      	str	r3, [r7, #0]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <vPortEnterCritical+0x4a>
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	24000010 	.word	0x24000010
 80079e0:	e000ed04 	.word	0xe000ed04

080079e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <vPortExitCritical+0x50>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <vPortExitCritical+0x24>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <vPortExitCritical+0x50>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4a09      	ldr	r2, [pc, #36]	; (8007a34 <vPortExitCritical+0x50>)
 8007a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a12:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <vPortExitCritical+0x50>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <vPortExitCritical+0x42>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	f383 8811 	msr	BASEPRI, r3
}
 8007a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a26:	bf00      	nop
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	24000010 	.word	0x24000010
	...

08007a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a40:	f3ef 8009 	mrs	r0, PSP
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <pxCurrentTCBConst>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	f01e 0f10 	tst.w	lr, #16
 8007a50:	bf08      	it	eq
 8007a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5a:	6010      	str	r0, [r2, #0]
 8007a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a64:	f380 8811 	msr	BASEPRI, r0
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f7fe ffc2 	bl	80069f8 <vTaskSwitchContext>
 8007a74:	f04f 0000 	mov.w	r0, #0
 8007a78:	f380 8811 	msr	BASEPRI, r0
 8007a7c:	bc09      	pop	{r0, r3}
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a86:	f01e 0f10 	tst.w	lr, #16
 8007a8a:	bf08      	it	eq
 8007a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a90:	f380 8809 	msr	PSP, r0
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w

08007aa0 <pxCurrentTCBConst>:
 8007aa0:	240007d0 	.word	0x240007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	607b      	str	r3, [r7, #4]
}
 8007ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ac2:	f7fe fedf 	bl	8006884 <xTaskIncrementTick>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007acc:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <xPortSysTickHandler+0x40>)
 8007ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	f383 8811 	msr	BASEPRI, r3
}
 8007ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	e000ed04 	.word	0xe000ed04

08007aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <vPortSetupTimerInterrupt+0x34>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007af6:	4b0b      	ldr	r3, [pc, #44]	; (8007b24 <vPortSetupTimerInterrupt+0x38>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007afc:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <vPortSetupTimerInterrupt+0x3c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <vPortSetupTimerInterrupt+0x40>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	099b      	lsrs	r3, r3, #6
 8007b08:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <vPortSetupTimerInterrupt+0x44>)
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b0e:	4b04      	ldr	r3, [pc, #16]	; (8007b20 <vPortSetupTimerInterrupt+0x34>)
 8007b10:	2207      	movs	r2, #7
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	e000e010 	.word	0xe000e010
 8007b24:	e000e018 	.word	0xe000e018
 8007b28:	24000000 	.word	0x24000000
 8007b2c:	10624dd3 	.word	0x10624dd3
 8007b30:	e000e014 	.word	0xe000e014

08007b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b44 <vPortEnableVFP+0x10>
 8007b38:	6801      	ldr	r1, [r0, #0]
 8007b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b3e:	6001      	str	r1, [r0, #0]
 8007b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b42:	bf00      	nop
 8007b44:	e000ed88 	.word	0xe000ed88

08007b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b4e:	f3ef 8305 	mrs	r3, IPSR
 8007b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d914      	bls.n	8007b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b5a:	4a17      	ldr	r2, [pc, #92]	; (8007bb8 <vPortValidateInterruptPriority+0x70>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b64:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <vPortValidateInterruptPriority+0x74>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	7afa      	ldrb	r2, [r7, #11]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d20a      	bcs.n	8007b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	607b      	str	r3, [r7, #4]
}
 8007b80:	bf00      	nop
 8007b82:	e7fe      	b.n	8007b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <vPortValidateInterruptPriority+0x78>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b8c:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <vPortValidateInterruptPriority+0x7c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d90a      	bls.n	8007baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	603b      	str	r3, [r7, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <vPortValidateInterruptPriority+0x60>
	}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	e000e3f0 	.word	0xe000e3f0
 8007bbc:	24000dfc 	.word	0x24000dfc
 8007bc0:	e000ed0c 	.word	0xe000ed0c
 8007bc4:	24000e00 	.word	0x24000e00

08007bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	; 0x28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007bd4:	f7fe fd9a 	bl	800670c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bd8:	4b5b      	ldr	r3, [pc, #364]	; (8007d48 <pvPortMalloc+0x180>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007be0:	f000 f920 	bl	8007e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007be4:	4b59      	ldr	r3, [pc, #356]	; (8007d4c <pvPortMalloc+0x184>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f040 8093 	bne.w	8007d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01d      	beq.n	8007c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d014      	beq.n	8007c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f023 0307 	bic.w	r3, r3, #7
 8007c10:	3308      	adds	r3, #8
 8007c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <pvPortMalloc+0x6c>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	617b      	str	r3, [r7, #20]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d06e      	beq.n	8007d18 <pvPortMalloc+0x150>
 8007c3a:	4b45      	ldr	r3, [pc, #276]	; (8007d50 <pvPortMalloc+0x188>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d869      	bhi.n	8007d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c44:	4b43      	ldr	r3, [pc, #268]	; (8007d54 <pvPortMalloc+0x18c>)
 8007c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c48:	4b42      	ldr	r3, [pc, #264]	; (8007d54 <pvPortMalloc+0x18c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c4e:	e004      	b.n	8007c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d903      	bls.n	8007c6c <pvPortMalloc+0xa4>
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f1      	bne.n	8007c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c6c:	4b36      	ldr	r3, [pc, #216]	; (8007d48 <pvPortMalloc+0x180>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d050      	beq.n	8007d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2208      	movs	r2, #8
 8007c7c:	4413      	add	r3, r2
 8007c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1ad2      	subs	r2, r2, r3
 8007c90:	2308      	movs	r3, #8
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d91f      	bls.n	8007cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	613b      	str	r3, [r7, #16]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cd2:	69b8      	ldr	r0, [r7, #24]
 8007cd4:	f000 f908 	bl	8007ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <pvPortMalloc+0x188>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <pvPortMalloc+0x188>)
 8007ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <pvPortMalloc+0x188>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b1b      	ldr	r3, [pc, #108]	; (8007d58 <pvPortMalloc+0x190>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d203      	bcs.n	8007cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cf2:	4b17      	ldr	r3, [pc, #92]	; (8007d50 <pvPortMalloc+0x188>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a18      	ldr	r2, [pc, #96]	; (8007d58 <pvPortMalloc+0x190>)
 8007cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <pvPortMalloc+0x184>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <pvPortMalloc+0x194>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <pvPortMalloc+0x194>)
 8007d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d18:	f7fe fd06 	bl	8006728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <pvPortMalloc+0x174>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <pvPortMalloc+0x172>
	return pvReturn;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	24004a0c 	.word	0x24004a0c
 8007d4c:	24004a20 	.word	0x24004a20
 8007d50:	24004a10 	.word	0x24004a10
 8007d54:	24004a04 	.word	0x24004a04
 8007d58:	24004a14 	.word	0x24004a14
 8007d5c:	24004a18 	.word	0x24004a18

08007d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04d      	beq.n	8007e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d72:	2308      	movs	r3, #8
 8007d74:	425b      	negs	r3, r3
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4413      	add	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <vPortFree+0xb8>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10a      	bne.n	8007da4 <vPortFree+0x44>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60fb      	str	r3, [r7, #12]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <vPortFree+0x62>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60bb      	str	r3, [r7, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	e7fe      	b.n	8007dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <vPortFree+0xb8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01e      	beq.n	8007e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11a      	bne.n	8007e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	4b0e      	ldr	r3, [pc, #56]	; (8007e18 <vPortFree+0xb8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	43db      	mvns	r3, r3
 8007de2:	401a      	ands	r2, r3
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007de8:	f7fe fc90 	bl	800670c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <vPortFree+0xbc>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4413      	add	r3, r2
 8007df6:	4a09      	ldr	r2, [pc, #36]	; (8007e1c <vPortFree+0xbc>)
 8007df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f000 f874 	bl	8007ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <vPortFree+0xc0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	4a06      	ldr	r2, [pc, #24]	; (8007e20 <vPortFree+0xc0>)
 8007e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e0a:	f7fe fc8d 	bl	8006728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e0e:	bf00      	nop
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	24004a20 	.word	0x24004a20
 8007e1c:	24004a10 	.word	0x24004a10
 8007e20:	24004a1c 	.word	0x24004a1c

08007e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e30:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <prvHeapInit+0xac>)
 8007e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3307      	adds	r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <prvHeapInit+0xac>)
 8007e54:	4413      	add	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <prvHeapInit+0xb0>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <prvHeapInit+0xb0>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e70:	2208      	movs	r2, #8
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <prvHeapInit+0xb4>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <prvHeapInit+0xb8>)
 8007eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <prvHeapInit+0xbc>)
 8007eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <prvHeapInit+0xc0>)
 8007ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	24000e04 	.word	0x24000e04
 8007ed4:	24004a04 	.word	0x24004a04
 8007ed8:	24004a0c 	.word	0x24004a0c
 8007edc:	24004a14 	.word	0x24004a14
 8007ee0:	24004a10 	.word	0x24004a10
 8007ee4:	24004a20 	.word	0x24004a20

08007ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ef0:	4b28      	ldr	r3, [pc, #160]	; (8007f94 <prvInsertBlockIntoFreeList+0xac>)
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e002      	b.n	8007efc <prvInsertBlockIntoFreeList+0x14>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d8f7      	bhi.n	8007ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d108      	bne.n	8007f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	441a      	add	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	441a      	add	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d118      	bne.n	8007f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <prvInsertBlockIntoFreeList+0xb0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d00d      	beq.n	8007f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	441a      	add	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e008      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f66:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <prvInsertBlockIntoFreeList+0xb0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e003      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d002      	beq.n	8007f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	24004a04 	.word	0x24004a04
 8007f98:	24004a0c 	.word	0x24004a0c

08007f9c <memset>:
 8007f9c:	4402      	add	r2, r0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d100      	bne.n	8007fa6 <memset+0xa>
 8007fa4:	4770      	bx	lr
 8007fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8007faa:	e7f9      	b.n	8007fa0 <memset+0x4>

08007fac <__libc_init_array>:
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4d0d      	ldr	r5, [pc, #52]	; (8007fe4 <__libc_init_array+0x38>)
 8007fb0:	4c0d      	ldr	r4, [pc, #52]	; (8007fe8 <__libc_init_array+0x3c>)
 8007fb2:	1b64      	subs	r4, r4, r5
 8007fb4:	10a4      	asrs	r4, r4, #2
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	42a6      	cmp	r6, r4
 8007fba:	d109      	bne.n	8007fd0 <__libc_init_array+0x24>
 8007fbc:	4d0b      	ldr	r5, [pc, #44]	; (8007fec <__libc_init_array+0x40>)
 8007fbe:	4c0c      	ldr	r4, [pc, #48]	; (8007ff0 <__libc_init_array+0x44>)
 8007fc0:	f000 f826 	bl	8008010 <_init>
 8007fc4:	1b64      	subs	r4, r4, r5
 8007fc6:	10a4      	asrs	r4, r4, #2
 8007fc8:	2600      	movs	r6, #0
 8007fca:	42a6      	cmp	r6, r4
 8007fcc:	d105      	bne.n	8007fda <__libc_init_array+0x2e>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}
 8007fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd4:	4798      	blx	r3
 8007fd6:	3601      	adds	r6, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__libc_init_array+0xc>
 8007fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fde:	4798      	blx	r3
 8007fe0:	3601      	adds	r6, #1
 8007fe2:	e7f2      	b.n	8007fca <__libc_init_array+0x1e>
 8007fe4:	08008188 	.word	0x08008188
 8007fe8:	08008188 	.word	0x08008188
 8007fec:	08008188 	.word	0x08008188
 8007ff0:	0800818c 	.word	0x0800818c

08007ff4 <memcpy>:
 8007ff4:	440a      	add	r2, r1
 8007ff6:	4291      	cmp	r1, r2
 8007ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ffc:	d100      	bne.n	8008000 <memcpy+0xc>
 8007ffe:	4770      	bx	lr
 8008000:	b510      	push	{r4, lr}
 8008002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800800a:	4291      	cmp	r1, r2
 800800c:	d1f9      	bne.n	8008002 <memcpy+0xe>
 800800e:	bd10      	pop	{r4, pc}

08008010 <_init>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	bf00      	nop
 8008014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008016:	bc08      	pop	{r3}
 8008018:	469e      	mov	lr, r3
 800801a:	4770      	bx	lr

0800801c <_fini>:
 800801c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801e:	bf00      	nop
 8008020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008022:	bc08      	pop	{r3}
 8008024:	469e      	mov	lr, r3
 8008026:	4770      	bx	lr
